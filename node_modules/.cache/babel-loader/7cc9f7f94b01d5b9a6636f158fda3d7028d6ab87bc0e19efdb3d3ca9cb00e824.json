{"ast":null,"code":"'use client';\n\nimport React, { useEffect, useLayoutEffect, createContext, useContext, useMemo, useRef, createElement } from 'react';\nimport * as revalidateEvents from './events.mjs';\nimport { dequal } from 'dequal/lite';\n\n// Global state used to deduplicate requests and store listeners\nconst SWRGlobalState = new WeakMap();\n\n// Shared state between server components and client components\nconst noop = () => {};\n// Using noop() as the undefined value as undefined can be replaced\n// by something else. Prettier ignore and extra parentheses are necessary here\n// to ensure that tsc doesn't remove the __NOINLINE__ comment.\n// prettier-ignore\nconst UNDEFINED = /*#__NOINLINE__*/noop();\nconst OBJECT = Object;\nconst isUndefined = v => v === UNDEFINED;\nconst isFunction = v => typeof v == 'function';\nconst mergeObjects = (a, b) => ({\n  ...a,\n  ...b\n});\nconst isPromiseLike = x => isFunction(x.then);\nconst EMPTY_CACHE = {};\nconst INITIAL_CACHE = {};\nconst STR_UNDEFINED = 'undefined';\n// NOTE: Use the function to guarantee it's re-evaluated between jsdom and node runtime for tests.\nconst isWindowDefined = typeof window != STR_UNDEFINED;\nconst isDocumentDefined = typeof document != STR_UNDEFINED;\nconst isLegacyDeno = isWindowDefined && 'Deno' in window;\nconst hasRequestAnimationFrame = () => isWindowDefined && typeof window['requestAnimationFrame'] != STR_UNDEFINED;\nconst createCacheHelper = (cache, key) => {\n  const state = SWRGlobalState.get(cache);\n  return [\n  // Getter\n  () => !isUndefined(key) && cache.get(key) || EMPTY_CACHE,\n  // Setter\n  info => {\n    if (!isUndefined(key)) {\n      const prev = cache.get(key);\n      // Before writing to the store, we keep the value in the initial cache\n      // if it's not there yet.\n      if (!(key in INITIAL_CACHE)) {\n        INITIAL_CACHE[key] = prev;\n      }\n      state[5](key, mergeObjects(prev, info), prev || EMPTY_CACHE);\n    }\n  },\n  // Subscriber\n  state[6],\n  // Get server cache snapshot\n  () => {\n    if (!isUndefined(key)) {\n      // If the cache was updated on the client, we return the stored initial value.\n      if (key in INITIAL_CACHE) return INITIAL_CACHE[key];\n    }\n    // If we haven't done any client-side updates, we return the current value.\n    return !isUndefined(key) && cache.get(key) || EMPTY_CACHE;\n  }];\n} // export { UNDEFINED, OBJECT, isUndefined, isFunction, mergeObjects, isPromiseLike }\n;\n\n/**\n * Due to the bug https://bugs.chromium.org/p/chromium/issues/detail?id=678075,\n * it's not reliable to detect if the browser is currently online or offline\n * based on `navigator.onLine`.\n * As a workaround, we always assume it's online on the first load, and change\n * the status upon `online` or `offline` events.\n */\nlet online = true;\nconst isOnline = () => online;\n// For node and React Native, `add/removeEventListener` doesn't exist on window.\nconst [onWindowEvent, offWindowEvent] = isWindowDefined && window.addEventListener ? [window.addEventListener.bind(window), window.removeEventListener.bind(window)] : [noop, noop];\nconst isVisible = () => {\n  const visibilityState = isDocumentDefined && document.visibilityState;\n  return isUndefined(visibilityState) || visibilityState !== 'hidden';\n};\nconst initFocus = callback => {\n  // focus revalidate\n  if (isDocumentDefined) {\n    document.addEventListener('visibilitychange', callback);\n  }\n  onWindowEvent('focus', callback);\n  return () => {\n    if (isDocumentDefined) {\n      document.removeEventListener('visibilitychange', callback);\n    }\n    offWindowEvent('focus', callback);\n  };\n};\nconst initReconnect = callback => {\n  // revalidate on reconnected\n  const onOnline = () => {\n    online = true;\n    callback();\n  };\n  // nothing to revalidate, just update the status\n  const onOffline = () => {\n    online = false;\n  };\n  onWindowEvent('online', onOnline);\n  onWindowEvent('offline', onOffline);\n  return () => {\n    offWindowEvent('online', onOnline);\n    offWindowEvent('offline', onOffline);\n  };\n};\nconst preset = {\n  isOnline,\n  isVisible\n};\nconst defaultConfigOptions = {\n  initFocus,\n  initReconnect\n};\nconst IS_REACT_LEGACY = !React.useId;\nconst IS_SERVER = !isWindowDefined || isLegacyDeno;\n// Polyfill requestAnimationFrame\nconst rAF = f => hasRequestAnimationFrame() ? window['requestAnimationFrame'](f) : setTimeout(f, 1);\n// React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser.\nconst useIsomorphicLayoutEffect = IS_SERVER ? useEffect : useLayoutEffect;\n// This assignment is to extend the Navigator type to use effectiveType.\nconst navigatorConnection = typeof navigator !== 'undefined' && navigator.connection;\n// Adjust the config based on slow connection status (<= 70Kbps).\nconst slowConnection = !IS_SERVER && navigatorConnection && (['slow-2g', '2g'].includes(navigatorConnection.effectiveType) || navigatorConnection.saveData);\n\n// use WeakMap to store the object->key mapping\n// so the objects can be garbage collected.\n// WeakMap uses a hashtable under the hood, so the lookup\n// complexity is almost O(1).\nconst table = new WeakMap();\nconst getTypeName = value => OBJECT.prototype.toString.call(value);\nconst isObjectTypeName = (typeName, type) => typeName === `[object ${type}]`;\n// counter of the key\nlet counter = 0;\n// A stable hash implementation that supports:\n// - Fast and ensures unique hash properties\n// - Handles unserializable values\n// - Handles object key ordering\n// - Generates short results\n//\n// This is not a serialization function, and the result is not guaranteed to be\n// parsable.\nconst stableHash = arg => {\n  const type = typeof arg;\n  const typeName = getTypeName(arg);\n  const isDate = isObjectTypeName(typeName, 'Date');\n  const isRegex = isObjectTypeName(typeName, 'RegExp');\n  const isPlainObject = isObjectTypeName(typeName, 'Object');\n  let result;\n  let index;\n  if (OBJECT(arg) === arg && !isDate && !isRegex) {\n    // Object/function, not null/date/regexp. Use WeakMap to store the id first.\n    // If it's already hashed, directly return the result.\n    result = table.get(arg);\n    if (result) return result;\n    // Store the hash first for circular reference detection before entering the\n    // recursive `stableHash` calls.\n    // For other objects like set and map, we use this id directly as the hash.\n    result = ++counter + '~';\n    table.set(arg, result);\n    if (Array.isArray(arg)) {\n      // Array.\n      result = '@';\n      for (index = 0; index < arg.length; index++) {\n        result += stableHash(arg[index]) + ',';\n      }\n      table.set(arg, result);\n    }\n    if (isPlainObject) {\n      // Object, sort keys.\n      result = '#';\n      const keys = OBJECT.keys(arg).sort();\n      while (!isUndefined(index = keys.pop())) {\n        if (!isUndefined(arg[index])) {\n          result += index + ':' + stableHash(arg[index]) + ',';\n        }\n      }\n      table.set(arg, result);\n    }\n  } else {\n    result = isDate ? arg.toJSON() : type == 'symbol' ? arg.toString() : type == 'string' ? JSON.stringify(arg) : '' + arg;\n  }\n  return result;\n};\nconst serialize = key => {\n  if (isFunction(key)) {\n    try {\n      key = key();\n    } catch (err) {\n      // dependencies not ready\n      key = '';\n    }\n  }\n  // Use the original key as the argument of fetcher. This can be a string or an\n  // array of values.\n  const args = key;\n  // If key is not falsy, or not an empty array, hash it.\n  key = typeof key == 'string' ? key : (Array.isArray(key) ? key.length : key) ? stableHash(key) : '';\n  return [key, args];\n};\n\n// Global timestamp.\nlet __timestamp = 0;\nconst getTimestamp = () => ++__timestamp;\nasync function internalMutate(...args) {\n  const [cache, _key, _data, _opts] = args;\n  // When passing as a boolean, it's explicitly used to disable/enable\n  // revalidation.\n  const options = mergeObjects({\n    populateCache: true,\n    throwOnError: true\n  }, typeof _opts === 'boolean' ? {\n    revalidate: _opts\n  } : _opts || {});\n  let populateCache = options.populateCache;\n  const rollbackOnErrorOption = options.rollbackOnError;\n  let optimisticData = options.optimisticData;\n  const rollbackOnError = error => {\n    return typeof rollbackOnErrorOption === 'function' ? rollbackOnErrorOption(error) : rollbackOnErrorOption !== false;\n  };\n  const throwOnError = options.throwOnError;\n  // If the second argument is a key filter, return the mutation results for all\n  // filtered keys.\n  if (isFunction(_key)) {\n    const keyFilter = _key;\n    const matchedKeys = [];\n    const it = cache.keys();\n    for (const key of it) {\n      if (\n      // Skip the special useSWRInfinite and useSWRSubscription keys.\n      !/^\\$(inf|sub)\\$/.test(key) && keyFilter(cache.get(key)._k)) {\n        matchedKeys.push(key);\n      }\n    }\n    return Promise.all(matchedKeys.map(mutateByKey));\n  }\n  return mutateByKey(_key);\n  async function mutateByKey(_k) {\n    // Serialize key\n    const [key] = serialize(_k);\n    if (!key) return;\n    const [get, set] = createCacheHelper(cache, key);\n    const [EVENT_REVALIDATORS, MUTATION, FETCH, PRELOAD] = SWRGlobalState.get(cache);\n    const startRevalidate = () => {\n      const revalidators = EVENT_REVALIDATORS[key];\n      const revalidate = isFunction(options.revalidate) ? options.revalidate(get().data, _k) : options.revalidate !== false;\n      if (revalidate) {\n        // Invalidate the key by deleting the concurrent request markers so new\n        // requests will not be deduped.\n        delete FETCH[key];\n        delete PRELOAD[key];\n        if (revalidators && revalidators[0]) {\n          return revalidators[0](revalidateEvents.MUTATE_EVENT).then(() => get().data);\n        }\n      }\n      return get().data;\n    };\n    // If there is no new data provided, revalidate the key with current state.\n    if (args.length < 3) {\n      // Revalidate and broadcast state.\n      return startRevalidate();\n    }\n    let data = _data;\n    let error;\n    let isError = false;\n    // Update global timestamps.\n    const beforeMutationTs = getTimestamp();\n    MUTATION[key] = [beforeMutationTs, 0];\n    const hasOptimisticData = !isUndefined(optimisticData);\n    const state = get();\n    // `displayedData` is the current value on screen. It could be the optimistic value\n    // that is going to be overridden by a `committedData`, or get reverted back.\n    // `committedData` is the validated value that comes from a fetch or mutation.\n    const displayedData = state.data;\n    const currentData = state._c;\n    const committedData = isUndefined(currentData) ? displayedData : currentData;\n    // Do optimistic data update.\n    if (hasOptimisticData) {\n      optimisticData = isFunction(optimisticData) ? optimisticData(committedData, displayedData) : optimisticData;\n      // When we set optimistic data, backup the current committedData data in `_c`.\n      set({\n        data: optimisticData,\n        _c: committedData\n      });\n    }\n    if (isFunction(data)) {\n      // `data` is a function, call it passing current cache value.\n      try {\n        data = data(committedData);\n      } catch (err) {\n        // If it throws an error synchronously, we shouldn't update the cache.\n        error = err;\n        isError = true;\n      }\n    }\n    // `data` is a promise/thenable, resolve the final data first.\n    if (data && isPromiseLike(data)) {\n      // This means that the mutation is async, we need to check timestamps to\n      // avoid race conditions.\n      data = await data.catch(err => {\n        error = err;\n        isError = true;\n      });\n      // Check if other mutations have occurred since we've started this mutation.\n      // If there's a race we don't update cache or broadcast the change,\n      // just return the data.\n      if (beforeMutationTs !== MUTATION[key][0]) {\n        if (isError) throw error;\n        return data;\n      } else if (isError && hasOptimisticData && rollbackOnError(error)) {\n        // Rollback. Always populate the cache in this case but without\n        // transforming the data.\n        populateCache = true;\n        // Reset data to be the latest committed data, and clear the `_c` value.\n        set({\n          data: committedData,\n          _c: UNDEFINED\n        });\n      }\n    }\n    // If we should write back the cache after request.\n    if (populateCache) {\n      if (!isError) {\n        // Transform the result into data.\n        if (isFunction(populateCache)) {\n          const populateCachedData = populateCache(data, committedData);\n          set({\n            data: populateCachedData,\n            error: UNDEFINED,\n            _c: UNDEFINED\n          });\n        } else {\n          // Only update cached data and reset the error if there's no error. Data can be `undefined` here.\n          set({\n            data,\n            error: UNDEFINED,\n            _c: UNDEFINED\n          });\n        }\n      }\n    }\n    // Reset the timestamp to mark the mutation has ended.\n    MUTATION[key][1] = getTimestamp();\n    // Update existing SWR Hooks' internal states:\n    Promise.resolve(startRevalidate()).then(() => {\n      // The mutation and revalidation are ended, we can clear it since the data is\n      // not an optimistic value anymore.\n      set({\n        _c: UNDEFINED\n      });\n    });\n    // Throw error or return data\n    if (isError) {\n      if (throwOnError) throw error;\n      return;\n    }\n    return data;\n  }\n}\nconst revalidateAllKeys = (revalidators, type) => {\n  for (const key in revalidators) {\n    if (revalidators[key][0]) revalidators[key][0](type);\n  }\n};\nconst initCache = (provider, options) => {\n  // The global state for a specific provider will be used to deduplicate\n  // requests and store listeners. As well as a mutate function that is bound to\n  // the cache.\n  // The provider's global state might be already initialized. Let's try to get the\n  // global state associated with the provider first.\n  if (!SWRGlobalState.has(provider)) {\n    const opts = mergeObjects(defaultConfigOptions, options);\n    // If there's no global state bound to the provider, create a new one with the\n    // new mutate function.\n    const EVENT_REVALIDATORS = Object.create(null);\n    const mutate = internalMutate.bind(UNDEFINED, provider);\n    let unmount = noop;\n    const subscriptions = Object.create(null);\n    const subscribe = (key, callback) => {\n      const subs = subscriptions[key] || [];\n      subscriptions[key] = subs;\n      subs.push(callback);\n      return () => subs.splice(subs.indexOf(callback), 1);\n    };\n    const setter = (key, value, prev) => {\n      provider.set(key, value);\n      const subs = subscriptions[key];\n      if (subs) {\n        for (const fn of subs) {\n          fn(value, prev);\n        }\n      }\n    };\n    const initProvider = () => {\n      if (!SWRGlobalState.has(provider)) {\n        // Update the state if it's new, or if the provider has been extended.\n        SWRGlobalState.set(provider, [EVENT_REVALIDATORS, Object.create(null), Object.create(null), Object.create(null), mutate, setter, subscribe]);\n        if (!IS_SERVER) {\n          // When listening to the native events for auto revalidations,\n          // we intentionally put a delay (setTimeout) here to make sure they are\n          // fired after immediate JavaScript executions, which can be\n          // React's state updates.\n          // This avoids some unnecessary revalidations such as\n          // https://github.com/vercel/swr/issues/1680.\n          const releaseFocus = opts.initFocus(setTimeout.bind(UNDEFINED, revalidateAllKeys.bind(UNDEFINED, EVENT_REVALIDATORS, revalidateEvents.FOCUS_EVENT)));\n          const releaseReconnect = opts.initReconnect(setTimeout.bind(UNDEFINED, revalidateAllKeys.bind(UNDEFINED, EVENT_REVALIDATORS, revalidateEvents.RECONNECT_EVENT)));\n          unmount = () => {\n            releaseFocus && releaseFocus();\n            releaseReconnect && releaseReconnect();\n            // When un-mounting, we need to remove the cache provider from the state\n            // storage too because it's a side-effect. Otherwise, when re-mounting we\n            // will not re-register those event listeners.\n            SWRGlobalState.delete(provider);\n          };\n        }\n      }\n    };\n    initProvider();\n    // This is a new provider, we need to initialize it and setup DOM events\n    // listeners for `focus` and `reconnect` actions.\n    // We might want to inject an extra layer on top of `provider` in the future,\n    // such as key serialization, auto GC, etc.\n    // For now, it's just a `Map` interface without any modifications.\n    return [provider, mutate, initProvider, unmount];\n  }\n  return [provider, SWRGlobalState.get(provider)[4]];\n};\n\n// error retry\nconst onErrorRetry = (_, __, config, revalidate, opts) => {\n  const maxRetryCount = config.errorRetryCount;\n  const currentRetryCount = opts.retryCount;\n  // Exponential backoff\n  const timeout = ~~((Math.random() + 0.5) * (1 << (currentRetryCount < 8 ? currentRetryCount : 8))) * config.errorRetryInterval;\n  if (!isUndefined(maxRetryCount) && currentRetryCount > maxRetryCount) {\n    return;\n  }\n  setTimeout(revalidate, timeout, opts);\n};\nconst compare = dequal;\n// Default cache provider\nconst [cache, mutate] = initCache(new Map());\n// Default config\nconst defaultConfig = mergeObjects({\n  // events\n  onLoadingSlow: noop,\n  onSuccess: noop,\n  onError: noop,\n  onErrorRetry,\n  onDiscarded: noop,\n  // switches\n  revalidateOnFocus: true,\n  revalidateOnReconnect: true,\n  revalidateIfStale: true,\n  shouldRetryOnError: true,\n  // timeouts\n  errorRetryInterval: slowConnection ? 10000 : 5000,\n  focusThrottleInterval: 5 * 1000,\n  dedupingInterval: 2 * 1000,\n  loadingTimeout: slowConnection ? 5000 : 3000,\n  // providers\n  compare,\n  isPaused: () => false,\n  cache,\n  mutate,\n  fallback: {}\n},\n// use web preset by default\npreset);\nconst mergeConfigs = (a, b) => {\n  // Need to create a new object to avoid mutating the original here.\n  const v = mergeObjects(a, b);\n  // If two configs are provided, merge their `use` and `fallback` options.\n  if (b) {\n    const {\n      use: u1,\n      fallback: f1\n    } = a;\n    const {\n      use: u2,\n      fallback: f2\n    } = b;\n    if (u1 && u2) {\n      v.use = u1.concat(u2);\n    }\n    if (f1 && f2) {\n      v.fallback = mergeObjects(f1, f2);\n    }\n  }\n  return v;\n};\nconst SWRConfigContext = createContext({});\nconst SWRConfig = props => {\n  const {\n    value\n  } = props;\n  const parentConfig = useContext(SWRConfigContext);\n  const isFunctionalConfig = isFunction(value);\n  const config = useMemo(() => isFunctionalConfig ? value(parentConfig) : value, [isFunctionalConfig, parentConfig, value]);\n  // Extend parent context values and middleware.\n  const extendedConfig = useMemo(() => isFunctionalConfig ? config : mergeConfigs(parentConfig, config), [isFunctionalConfig, parentConfig, config]);\n  // Should not use the inherited provider.\n  const provider = config && config.provider;\n  // initialize the cache only on first access.\n  const cacheContextRef = useRef(UNDEFINED);\n  if (provider && !cacheContextRef.current) {\n    cacheContextRef.current = initCache(provider(extendedConfig.cache || cache), config);\n  }\n  const cacheContext = cacheContextRef.current;\n  // Override the cache if a new provider is given.\n  if (cacheContext) {\n    extendedConfig.cache = cacheContext[0];\n    extendedConfig.mutate = cacheContext[1];\n  }\n  // Unsubscribe events.\n  useIsomorphicLayoutEffect(() => {\n    if (cacheContext) {\n      cacheContext[2] && cacheContext[2]();\n      return cacheContext[3];\n    }\n  }, []);\n  return createElement(SWRConfigContext.Provider, mergeObjects(props, {\n    value: extendedConfig\n  }));\n};\nexport { noop as A, isPromiseLike as B, IS_REACT_LEGACY as I, OBJECT as O, SWRConfigContext as S, UNDEFINED as U, isFunction as a, SWRGlobalState as b, cache as c, defaultConfig as d, isUndefined as e, mergeConfigs as f, SWRConfig as g, initCache as h, isWindowDefined as i, mutate as j, compare as k, stableHash as l, mergeObjects as m, internalMutate as n, getTimestamp as o, preset as p, defaultConfigOptions as q, IS_SERVER as r, serialize as s, rAF as t, useIsomorphicLayoutEffect as u, slowConnection as v, isDocumentDefined as w, isLegacyDeno as x, hasRequestAnimationFrame as y, createCacheHelper as z };","map":{"version":3,"names":["React","useEffect","useLayoutEffect","createContext","useContext","useMemo","useRef","createElement","revalidateEvents","dequal","SWRGlobalState","WeakMap","noop","UNDEFINED","OBJECT","Object","isUndefined","v","isFunction","mergeObjects","a","b","isPromiseLike","x","then","EMPTY_CACHE","INITIAL_CACHE","STR_UNDEFINED","isWindowDefined","window","isDocumentDefined","document","isLegacyDeno","hasRequestAnimationFrame","createCacheHelper","cache","key","state","get","info","prev","online","isOnline","onWindowEvent","offWindowEvent","addEventListener","bind","removeEventListener","isVisible","visibilityState","initFocus","callback","initReconnect","onOnline","onOffline","preset","defaultConfigOptions","IS_REACT_LEGACY","useId","IS_SERVER","rAF","f","setTimeout","useIsomorphicLayoutEffect","navigatorConnection","navigator","connection","slowConnection","includes","effectiveType","saveData","table","getTypeName","value","prototype","toString","call","isObjectTypeName","typeName","type","counter","stableHash","arg","isDate","isRegex","isPlainObject","result","index","set","Array","isArray","length","keys","sort","pop","toJSON","JSON","stringify","serialize","err","args","__timestamp","getTimestamp","internalMutate","_key","_data","_opts","options","populateCache","throwOnError","revalidate","rollbackOnErrorOption","rollbackOnError","optimisticData","error","keyFilter","matchedKeys","it","test","_k","push","Promise","all","map","mutateByKey","EVENT_REVALIDATORS","MUTATION","FETCH","PRELOAD","startRevalidate","revalidators","data","MUTATE_EVENT","isError","beforeMutationTs","hasOptimisticData","displayedData","currentData","_c","committedData","catch","populateCachedData","resolve","revalidateAllKeys","initCache","provider","has","opts","create","mutate","unmount","subscriptions","subscribe","subs","splice","indexOf","setter","fn","initProvider","releaseFocus","FOCUS_EVENT","releaseReconnect","RECONNECT_EVENT","delete","onErrorRetry","_","__","config","maxRetryCount","errorRetryCount","currentRetryCount","retryCount","timeout","Math","random","errorRetryInterval","compare","Map","defaultConfig","onLoadingSlow","onSuccess","onError","onDiscarded","revalidateOnFocus","revalidateOnReconnect","revalidateIfStale","shouldRetryOnError","focusThrottleInterval","dedupingInterval","loadingTimeout","isPaused","fallback","mergeConfigs","use","u1","f1","u2","f2","concat","SWRConfigContext","SWRConfig","props","parentConfig","isFunctionalConfig","extendedConfig","cacheContextRef","current","cacheContext","Provider","A","B","I","O","S","U","c","d","e","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","w","y","z"],"sources":["D:/Ripple Media Office work/React/wisdomwithin-clerk-new/node_modules/swr/dist/_internal/config-context-client-BoS53ST9.mjs"],"sourcesContent":["'use client';\nimport React, { useEffect, useLayoutEffect, createContext, useContext, useMemo, useRef, createElement } from 'react';\nimport * as revalidateEvents from './events.mjs';\nimport { dequal } from 'dequal/lite';\n\n// Global state used to deduplicate requests and store listeners\nconst SWRGlobalState = new WeakMap();\n\n// Shared state between server components and client components\nconst noop = ()=>{};\n// Using noop() as the undefined value as undefined can be replaced\n// by something else. Prettier ignore and extra parentheses are necessary here\n// to ensure that tsc doesn't remove the __NOINLINE__ comment.\n// prettier-ignore\nconst UNDEFINED = /*#__NOINLINE__*/ noop();\nconst OBJECT = Object;\nconst isUndefined = (v)=>v === UNDEFINED;\nconst isFunction = (v)=>typeof v == 'function';\nconst mergeObjects = (a, b)=>({\n        ...a,\n        ...b\n    });\nconst isPromiseLike = (x)=>isFunction(x.then);\n\nconst EMPTY_CACHE = {};\nconst INITIAL_CACHE = {};\nconst STR_UNDEFINED = 'undefined';\n// NOTE: Use the function to guarantee it's re-evaluated between jsdom and node runtime for tests.\nconst isWindowDefined = typeof window != STR_UNDEFINED;\nconst isDocumentDefined = typeof document != STR_UNDEFINED;\nconst isLegacyDeno = isWindowDefined && 'Deno' in window;\nconst hasRequestAnimationFrame = ()=>isWindowDefined && typeof window['requestAnimationFrame'] != STR_UNDEFINED;\nconst createCacheHelper = (cache, key)=>{\n    const state = SWRGlobalState.get(cache);\n    return [\n        // Getter\n        ()=>!isUndefined(key) && cache.get(key) || EMPTY_CACHE,\n        // Setter\n        (info)=>{\n            if (!isUndefined(key)) {\n                const prev = cache.get(key);\n                // Before writing to the store, we keep the value in the initial cache\n                // if it's not there yet.\n                if (!(key in INITIAL_CACHE)) {\n                    INITIAL_CACHE[key] = prev;\n                }\n                state[5](key, mergeObjects(prev, info), prev || EMPTY_CACHE);\n            }\n        },\n        // Subscriber\n        state[6],\n        // Get server cache snapshot\n        ()=>{\n            if (!isUndefined(key)) {\n                // If the cache was updated on the client, we return the stored initial value.\n                if (key in INITIAL_CACHE) return INITIAL_CACHE[key];\n            }\n            // If we haven't done any client-side updates, we return the current value.\n            return !isUndefined(key) && cache.get(key) || EMPTY_CACHE;\n        }\n    ];\n} // export { UNDEFINED, OBJECT, isUndefined, isFunction, mergeObjects, isPromiseLike }\n;\n\n/**\n * Due to the bug https://bugs.chromium.org/p/chromium/issues/detail?id=678075,\n * it's not reliable to detect if the browser is currently online or offline\n * based on `navigator.onLine`.\n * As a workaround, we always assume it's online on the first load, and change\n * the status upon `online` or `offline` events.\n */ let online = true;\nconst isOnline = ()=>online;\n// For node and React Native, `add/removeEventListener` doesn't exist on window.\nconst [onWindowEvent, offWindowEvent] = isWindowDefined && window.addEventListener ? [\n    window.addEventListener.bind(window),\n    window.removeEventListener.bind(window)\n] : [\n    noop,\n    noop\n];\nconst isVisible = ()=>{\n    const visibilityState = isDocumentDefined && document.visibilityState;\n    return isUndefined(visibilityState) || visibilityState !== 'hidden';\n};\nconst initFocus = (callback)=>{\n    // focus revalidate\n    if (isDocumentDefined) {\n        document.addEventListener('visibilitychange', callback);\n    }\n    onWindowEvent('focus', callback);\n    return ()=>{\n        if (isDocumentDefined) {\n            document.removeEventListener('visibilitychange', callback);\n        }\n        offWindowEvent('focus', callback);\n    };\n};\nconst initReconnect = (callback)=>{\n    // revalidate on reconnected\n    const onOnline = ()=>{\n        online = true;\n        callback();\n    };\n    // nothing to revalidate, just update the status\n    const onOffline = ()=>{\n        online = false;\n    };\n    onWindowEvent('online', onOnline);\n    onWindowEvent('offline', onOffline);\n    return ()=>{\n        offWindowEvent('online', onOnline);\n        offWindowEvent('offline', onOffline);\n    };\n};\nconst preset = {\n    isOnline,\n    isVisible\n};\nconst defaultConfigOptions = {\n    initFocus,\n    initReconnect\n};\n\nconst IS_REACT_LEGACY = !React.useId;\nconst IS_SERVER = !isWindowDefined || isLegacyDeno;\n// Polyfill requestAnimationFrame\nconst rAF = (f)=>hasRequestAnimationFrame() ? window['requestAnimationFrame'](f) : setTimeout(f, 1);\n// React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser.\nconst useIsomorphicLayoutEffect = IS_SERVER ? useEffect : useLayoutEffect;\n// This assignment is to extend the Navigator type to use effectiveType.\nconst navigatorConnection = typeof navigator !== 'undefined' && navigator.connection;\n// Adjust the config based on slow connection status (<= 70Kbps).\nconst slowConnection = !IS_SERVER && navigatorConnection && ([\n    'slow-2g',\n    '2g'\n].includes(navigatorConnection.effectiveType) || navigatorConnection.saveData);\n\n// use WeakMap to store the object->key mapping\n// so the objects can be garbage collected.\n// WeakMap uses a hashtable under the hood, so the lookup\n// complexity is almost O(1).\nconst table = new WeakMap();\nconst getTypeName = (value)=>OBJECT.prototype.toString.call(value);\nconst isObjectTypeName = (typeName, type)=>typeName === `[object ${type}]`;\n// counter of the key\nlet counter = 0;\n// A stable hash implementation that supports:\n// - Fast and ensures unique hash properties\n// - Handles unserializable values\n// - Handles object key ordering\n// - Generates short results\n//\n// This is not a serialization function, and the result is not guaranteed to be\n// parsable.\nconst stableHash = (arg)=>{\n    const type = typeof arg;\n    const typeName = getTypeName(arg);\n    const isDate = isObjectTypeName(typeName, 'Date');\n    const isRegex = isObjectTypeName(typeName, 'RegExp');\n    const isPlainObject = isObjectTypeName(typeName, 'Object');\n    let result;\n    let index;\n    if (OBJECT(arg) === arg && !isDate && !isRegex) {\n        // Object/function, not null/date/regexp. Use WeakMap to store the id first.\n        // If it's already hashed, directly return the result.\n        result = table.get(arg);\n        if (result) return result;\n        // Store the hash first for circular reference detection before entering the\n        // recursive `stableHash` calls.\n        // For other objects like set and map, we use this id directly as the hash.\n        result = ++counter + '~';\n        table.set(arg, result);\n        if (Array.isArray(arg)) {\n            // Array.\n            result = '@';\n            for(index = 0; index < arg.length; index++){\n                result += stableHash(arg[index]) + ',';\n            }\n            table.set(arg, result);\n        }\n        if (isPlainObject) {\n            // Object, sort keys.\n            result = '#';\n            const keys = OBJECT.keys(arg).sort();\n            while(!isUndefined(index = keys.pop())){\n                if (!isUndefined(arg[index])) {\n                    result += index + ':' + stableHash(arg[index]) + ',';\n                }\n            }\n            table.set(arg, result);\n        }\n    } else {\n        result = isDate ? arg.toJSON() : type == 'symbol' ? arg.toString() : type == 'string' ? JSON.stringify(arg) : '' + arg;\n    }\n    return result;\n};\n\nconst serialize = (key)=>{\n    if (isFunction(key)) {\n        try {\n            key = key();\n        } catch (err) {\n            // dependencies not ready\n            key = '';\n        }\n    }\n    // Use the original key as the argument of fetcher. This can be a string or an\n    // array of values.\n    const args = key;\n    // If key is not falsy, or not an empty array, hash it.\n    key = typeof key == 'string' ? key : (Array.isArray(key) ? key.length : key) ? stableHash(key) : '';\n    return [\n        key,\n        args\n    ];\n};\n\n// Global timestamp.\nlet __timestamp = 0;\nconst getTimestamp = ()=>++__timestamp;\n\nasync function internalMutate(...args) {\n    const [cache, _key, _data, _opts] = args;\n    // When passing as a boolean, it's explicitly used to disable/enable\n    // revalidation.\n    const options = mergeObjects({\n        populateCache: true,\n        throwOnError: true\n    }, typeof _opts === 'boolean' ? {\n        revalidate: _opts\n    } : _opts || {});\n    let populateCache = options.populateCache;\n    const rollbackOnErrorOption = options.rollbackOnError;\n    let optimisticData = options.optimisticData;\n    const rollbackOnError = (error)=>{\n        return typeof rollbackOnErrorOption === 'function' ? rollbackOnErrorOption(error) : rollbackOnErrorOption !== false;\n    };\n    const throwOnError = options.throwOnError;\n    // If the second argument is a key filter, return the mutation results for all\n    // filtered keys.\n    if (isFunction(_key)) {\n        const keyFilter = _key;\n        const matchedKeys = [];\n        const it = cache.keys();\n        for (const key of it){\n            if (// Skip the special useSWRInfinite and useSWRSubscription keys.\n            !/^\\$(inf|sub)\\$/.test(key) && keyFilter(cache.get(key)._k)) {\n                matchedKeys.push(key);\n            }\n        }\n        return Promise.all(matchedKeys.map(mutateByKey));\n    }\n    return mutateByKey(_key);\n    async function mutateByKey(_k) {\n        // Serialize key\n        const [key] = serialize(_k);\n        if (!key) return;\n        const [get, set] = createCacheHelper(cache, key);\n        const [EVENT_REVALIDATORS, MUTATION, FETCH, PRELOAD] = SWRGlobalState.get(cache);\n        const startRevalidate = ()=>{\n            const revalidators = EVENT_REVALIDATORS[key];\n            const revalidate = isFunction(options.revalidate) ? options.revalidate(get().data, _k) : options.revalidate !== false;\n            if (revalidate) {\n                // Invalidate the key by deleting the concurrent request markers so new\n                // requests will not be deduped.\n                delete FETCH[key];\n                delete PRELOAD[key];\n                if (revalidators && revalidators[0]) {\n                    return revalidators[0](revalidateEvents.MUTATE_EVENT).then(()=>get().data);\n                }\n            }\n            return get().data;\n        };\n        // If there is no new data provided, revalidate the key with current state.\n        if (args.length < 3) {\n            // Revalidate and broadcast state.\n            return startRevalidate();\n        }\n        let data = _data;\n        let error;\n        let isError = false;\n        // Update global timestamps.\n        const beforeMutationTs = getTimestamp();\n        MUTATION[key] = [\n            beforeMutationTs,\n            0\n        ];\n        const hasOptimisticData = !isUndefined(optimisticData);\n        const state = get();\n        // `displayedData` is the current value on screen. It could be the optimistic value\n        // that is going to be overridden by a `committedData`, or get reverted back.\n        // `committedData` is the validated value that comes from a fetch or mutation.\n        const displayedData = state.data;\n        const currentData = state._c;\n        const committedData = isUndefined(currentData) ? displayedData : currentData;\n        // Do optimistic data update.\n        if (hasOptimisticData) {\n            optimisticData = isFunction(optimisticData) ? optimisticData(committedData, displayedData) : optimisticData;\n            // When we set optimistic data, backup the current committedData data in `_c`.\n            set({\n                data: optimisticData,\n                _c: committedData\n            });\n        }\n        if (isFunction(data)) {\n            // `data` is a function, call it passing current cache value.\n            try {\n                data = data(committedData);\n            } catch (err) {\n                // If it throws an error synchronously, we shouldn't update the cache.\n                error = err;\n                isError = true;\n            }\n        }\n        // `data` is a promise/thenable, resolve the final data first.\n        if (data && isPromiseLike(data)) {\n            // This means that the mutation is async, we need to check timestamps to\n            // avoid race conditions.\n            data = await data.catch((err)=>{\n                error = err;\n                isError = true;\n            });\n            // Check if other mutations have occurred since we've started this mutation.\n            // If there's a race we don't update cache or broadcast the change,\n            // just return the data.\n            if (beforeMutationTs !== MUTATION[key][0]) {\n                if (isError) throw error;\n                return data;\n            } else if (isError && hasOptimisticData && rollbackOnError(error)) {\n                // Rollback. Always populate the cache in this case but without\n                // transforming the data.\n                populateCache = true;\n                // Reset data to be the latest committed data, and clear the `_c` value.\n                set({\n                    data: committedData,\n                    _c: UNDEFINED\n                });\n            }\n        }\n        // If we should write back the cache after request.\n        if (populateCache) {\n            if (!isError) {\n                // Transform the result into data.\n                if (isFunction(populateCache)) {\n                    const populateCachedData = populateCache(data, committedData);\n                    set({\n                        data: populateCachedData,\n                        error: UNDEFINED,\n                        _c: UNDEFINED\n                    });\n                } else {\n                    // Only update cached data and reset the error if there's no error. Data can be `undefined` here.\n                    set({\n                        data,\n                        error: UNDEFINED,\n                        _c: UNDEFINED\n                    });\n                }\n            }\n        }\n        // Reset the timestamp to mark the mutation has ended.\n        MUTATION[key][1] = getTimestamp();\n        // Update existing SWR Hooks' internal states:\n        Promise.resolve(startRevalidate()).then(()=>{\n            // The mutation and revalidation are ended, we can clear it since the data is\n            // not an optimistic value anymore.\n            set({\n                _c: UNDEFINED\n            });\n        });\n        // Throw error or return data\n        if (isError) {\n            if (throwOnError) throw error;\n            return;\n        }\n        return data;\n    }\n}\n\nconst revalidateAllKeys = (revalidators, type)=>{\n    for(const key in revalidators){\n        if (revalidators[key][0]) revalidators[key][0](type);\n    }\n};\nconst initCache = (provider, options)=>{\n    // The global state for a specific provider will be used to deduplicate\n    // requests and store listeners. As well as a mutate function that is bound to\n    // the cache.\n    // The provider's global state might be already initialized. Let's try to get the\n    // global state associated with the provider first.\n    if (!SWRGlobalState.has(provider)) {\n        const opts = mergeObjects(defaultConfigOptions, options);\n        // If there's no global state bound to the provider, create a new one with the\n        // new mutate function.\n        const EVENT_REVALIDATORS = Object.create(null);\n        const mutate = internalMutate.bind(UNDEFINED, provider);\n        let unmount = noop;\n        const subscriptions = Object.create(null);\n        const subscribe = (key, callback)=>{\n            const subs = subscriptions[key] || [];\n            subscriptions[key] = subs;\n            subs.push(callback);\n            return ()=>subs.splice(subs.indexOf(callback), 1);\n        };\n        const setter = (key, value, prev)=>{\n            provider.set(key, value);\n            const subs = subscriptions[key];\n            if (subs) {\n                for (const fn of subs){\n                    fn(value, prev);\n                }\n            }\n        };\n        const initProvider = ()=>{\n            if (!SWRGlobalState.has(provider)) {\n                // Update the state if it's new, or if the provider has been extended.\n                SWRGlobalState.set(provider, [\n                    EVENT_REVALIDATORS,\n                    Object.create(null),\n                    Object.create(null),\n                    Object.create(null),\n                    mutate,\n                    setter,\n                    subscribe\n                ]);\n                if (!IS_SERVER) {\n                    // When listening to the native events for auto revalidations,\n                    // we intentionally put a delay (setTimeout) here to make sure they are\n                    // fired after immediate JavaScript executions, which can be\n                    // React's state updates.\n                    // This avoids some unnecessary revalidations such as\n                    // https://github.com/vercel/swr/issues/1680.\n                    const releaseFocus = opts.initFocus(setTimeout.bind(UNDEFINED, revalidateAllKeys.bind(UNDEFINED, EVENT_REVALIDATORS, revalidateEvents.FOCUS_EVENT)));\n                    const releaseReconnect = opts.initReconnect(setTimeout.bind(UNDEFINED, revalidateAllKeys.bind(UNDEFINED, EVENT_REVALIDATORS, revalidateEvents.RECONNECT_EVENT)));\n                    unmount = ()=>{\n                        releaseFocus && releaseFocus();\n                        releaseReconnect && releaseReconnect();\n                        // When un-mounting, we need to remove the cache provider from the state\n                        // storage too because it's a side-effect. Otherwise, when re-mounting we\n                        // will not re-register those event listeners.\n                        SWRGlobalState.delete(provider);\n                    };\n                }\n            }\n        };\n        initProvider();\n        // This is a new provider, we need to initialize it and setup DOM events\n        // listeners for `focus` and `reconnect` actions.\n        // We might want to inject an extra layer on top of `provider` in the future,\n        // such as key serialization, auto GC, etc.\n        // For now, it's just a `Map` interface without any modifications.\n        return [\n            provider,\n            mutate,\n            initProvider,\n            unmount\n        ];\n    }\n    return [\n        provider,\n        SWRGlobalState.get(provider)[4]\n    ];\n};\n\n// error retry\nconst onErrorRetry = (_, __, config, revalidate, opts)=>{\n    const maxRetryCount = config.errorRetryCount;\n    const currentRetryCount = opts.retryCount;\n    // Exponential backoff\n    const timeout = ~~((Math.random() + 0.5) * (1 << (currentRetryCount < 8 ? currentRetryCount : 8))) * config.errorRetryInterval;\n    if (!isUndefined(maxRetryCount) && currentRetryCount > maxRetryCount) {\n        return;\n    }\n    setTimeout(revalidate, timeout, opts);\n};\nconst compare = dequal;\n// Default cache provider\nconst [cache, mutate] = initCache(new Map());\n// Default config\nconst defaultConfig = mergeObjects({\n    // events\n    onLoadingSlow: noop,\n    onSuccess: noop,\n    onError: noop,\n    onErrorRetry,\n    onDiscarded: noop,\n    // switches\n    revalidateOnFocus: true,\n    revalidateOnReconnect: true,\n    revalidateIfStale: true,\n    shouldRetryOnError: true,\n    // timeouts\n    errorRetryInterval: slowConnection ? 10000 : 5000,\n    focusThrottleInterval: 5 * 1000,\n    dedupingInterval: 2 * 1000,\n    loadingTimeout: slowConnection ? 5000 : 3000,\n    // providers\n    compare,\n    isPaused: ()=>false,\n    cache,\n    mutate,\n    fallback: {}\n}, // use web preset by default\npreset);\n\nconst mergeConfigs = (a, b)=>{\n    // Need to create a new object to avoid mutating the original here.\n    const v = mergeObjects(a, b);\n    // If two configs are provided, merge their `use` and `fallback` options.\n    if (b) {\n        const { use: u1, fallback: f1 } = a;\n        const { use: u2, fallback: f2 } = b;\n        if (u1 && u2) {\n            v.use = u1.concat(u2);\n        }\n        if (f1 && f2) {\n            v.fallback = mergeObjects(f1, f2);\n        }\n    }\n    return v;\n};\n\nconst SWRConfigContext = createContext({});\nconst SWRConfig = (props)=>{\n    const { value } = props;\n    const parentConfig = useContext(SWRConfigContext);\n    const isFunctionalConfig = isFunction(value);\n    const config = useMemo(()=>isFunctionalConfig ? value(parentConfig) : value, [\n        isFunctionalConfig,\n        parentConfig,\n        value\n    ]);\n    // Extend parent context values and middleware.\n    const extendedConfig = useMemo(()=>isFunctionalConfig ? config : mergeConfigs(parentConfig, config), [\n        isFunctionalConfig,\n        parentConfig,\n        config\n    ]);\n    // Should not use the inherited provider.\n    const provider = config && config.provider;\n    // initialize the cache only on first access.\n    const cacheContextRef = useRef(UNDEFINED);\n    if (provider && !cacheContextRef.current) {\n        cacheContextRef.current = initCache(provider(extendedConfig.cache || cache), config);\n    }\n    const cacheContext = cacheContextRef.current;\n    // Override the cache if a new provider is given.\n    if (cacheContext) {\n        extendedConfig.cache = cacheContext[0];\n        extendedConfig.mutate = cacheContext[1];\n    }\n    // Unsubscribe events.\n    useIsomorphicLayoutEffect(()=>{\n        if (cacheContext) {\n            cacheContext[2] && cacheContext[2]();\n            return cacheContext[3];\n        }\n    }, []);\n    return createElement(SWRConfigContext.Provider, mergeObjects(props, {\n        value: extendedConfig\n    }));\n};\n\nexport { noop as A, isPromiseLike as B, IS_REACT_LEGACY as I, OBJECT as O, SWRConfigContext as S, UNDEFINED as U, isFunction as a, SWRGlobalState as b, cache as c, defaultConfig as d, isUndefined as e, mergeConfigs as f, SWRConfig as g, initCache as h, isWindowDefined as i, mutate as j, compare as k, stableHash as l, mergeObjects as m, internalMutate as n, getTimestamp as o, preset as p, defaultConfigOptions as q, IS_SERVER as r, serialize as s, rAF as t, useIsomorphicLayoutEffect as u, slowConnection as v, isDocumentDefined as w, isLegacyDeno as x, hasRequestAnimationFrame as y, createCacheHelper as z };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}