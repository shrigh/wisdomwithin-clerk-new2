{"ast":null,"code":"// src/authorization.ts\nvar TYPES_TO_OBJECTS = {\n  strict_mfa: {\n    afterMinutes: 10,\n    level: \"multi_factor\"\n  },\n  strict: {\n    afterMinutes: 10,\n    level: \"second_factor\"\n  },\n  moderate: {\n    afterMinutes: 60,\n    level: \"second_factor\"\n  },\n  lax: {\n    afterMinutes: 1440,\n    level: \"second_factor\"\n  }\n};\nvar ALLOWED_LEVELS = /* @__PURE__ */new Set([\"first_factor\", \"second_factor\", \"multi_factor\"]);\nvar ALLOWED_TYPES = /* @__PURE__ */new Set([\"strict_mfa\", \"strict\", \"moderate\", \"lax\"]);\nvar isValidMaxAge = maxAge => typeof maxAge === \"number\" && maxAge > 0;\nvar isValidLevel = level => ALLOWED_LEVELS.has(level);\nvar isValidVerificationType = type => ALLOWED_TYPES.has(type);\nvar prefixWithOrg = value => value.replace(/^(org:)*/, \"org:\");\nvar checkOrgAuthorization = (params, options) => {\n  const {\n    orgId,\n    orgRole,\n    orgPermissions\n  } = options;\n  if (!params.role && !params.permission) {\n    return null;\n  }\n  if (!orgId || !orgRole || !orgPermissions) {\n    return null;\n  }\n  if (params.permission) {\n    return orgPermissions.includes(prefixWithOrg(params.permission));\n  }\n  if (params.role) {\n    return prefixWithOrg(orgRole) === prefixWithOrg(params.role);\n  }\n  return null;\n};\nvar checkForFeatureOrPlan = (claim, featureOrPlan) => {\n  const {\n    org: orgFeatures,\n    user: userFeatures\n  } = splitByScope(claim);\n  const [scope, _id] = featureOrPlan.split(\":\");\n  const id = _id || scope;\n  if (scope === \"org\") {\n    return orgFeatures.includes(id);\n  } else if (scope === \"user\") {\n    return userFeatures.includes(id);\n  } else {\n    return [...orgFeatures, ...userFeatures].includes(id);\n  }\n};\nvar checkBillingAuthorization = (params, options) => {\n  const {\n    features,\n    plans\n  } = options;\n  if (params.feature && features) {\n    return checkForFeatureOrPlan(features, params.feature);\n  }\n  if (params.plan && plans) {\n    return checkForFeatureOrPlan(plans, params.plan);\n  }\n  return null;\n};\nvar splitByScope = fea => {\n  const features = fea ? fea.split(\",\").map(f => f.trim()) : [];\n  return {\n    org: features.filter(f => f.split(\":\")[0].includes(\"o\")).map(f => f.split(\":\")[1]),\n    user: features.filter(f => f.split(\":\")[0].includes(\"u\")).map(f => f.split(\":\")[1])\n  };\n};\nvar validateReverificationConfig = config => {\n  if (!config) {\n    return false;\n  }\n  const convertConfigToObject = config2 => {\n    if (typeof config2 === \"string\") {\n      return TYPES_TO_OBJECTS[config2];\n    }\n    return config2;\n  };\n  const isValidStringValue = typeof config === \"string\" && isValidVerificationType(config);\n  const isValidObjectValue = typeof config === \"object\" && isValidLevel(config.level) && isValidMaxAge(config.afterMinutes);\n  if (isValidStringValue || isValidObjectValue) {\n    return convertConfigToObject.bind(null, config);\n  }\n  return false;\n};\nvar checkReverificationAuthorization = (params, {\n  factorVerificationAge\n}) => {\n  if (!params.reverification || !factorVerificationAge) {\n    return null;\n  }\n  const isValidReverification = validateReverificationConfig(params.reverification);\n  if (!isValidReverification) {\n    return null;\n  }\n  const {\n    level,\n    afterMinutes\n  } = isValidReverification();\n  const [factor1Age, factor2Age] = factorVerificationAge;\n  const isValidFactor1 = factor1Age !== -1 ? afterMinutes > factor1Age : null;\n  const isValidFactor2 = factor2Age !== -1 ? afterMinutes > factor2Age : null;\n  switch (level) {\n    case \"first_factor\":\n      return isValidFactor1;\n    case \"second_factor\":\n      return factor2Age !== -1 ? isValidFactor2 : isValidFactor1;\n    case \"multi_factor\":\n      return factor2Age === -1 ? isValidFactor1 : isValidFactor1 && isValidFactor2;\n  }\n};\nvar createCheckAuthorization = options => {\n  return params => {\n    if (!options.userId) {\n      return false;\n    }\n    const billingAuthorization = checkBillingAuthorization(params, options);\n    const orgAuthorization = checkOrgAuthorization(params, options);\n    const reverificationAuthorization = checkReverificationAuthorization(params, options);\n    if ([billingAuthorization || orgAuthorization, reverificationAuthorization].some(a => a === null)) {\n      return [billingAuthorization || orgAuthorization, reverificationAuthorization].some(a => a === true);\n    }\n    return [billingAuthorization || orgAuthorization, reverificationAuthorization].every(a => a === true);\n  };\n};\nvar resolveAuthState = ({\n  authObject: {\n    sessionId,\n    sessionStatus,\n    userId,\n    actor,\n    orgId,\n    orgRole,\n    orgSlug,\n    signOut,\n    getToken,\n    has,\n    sessionClaims\n  },\n  options: {\n    treatPendingAsSignedOut = true\n  }\n}) => {\n  if (sessionId === void 0 && userId === void 0) {\n    return {\n      isLoaded: false,\n      isSignedIn: void 0,\n      sessionId,\n      sessionClaims: void 0,\n      userId,\n      actor: void 0,\n      orgId: void 0,\n      orgRole: void 0,\n      orgSlug: void 0,\n      has: void 0,\n      signOut,\n      getToken\n    };\n  }\n  if (sessionId === null && userId === null) {\n    return {\n      isLoaded: true,\n      isSignedIn: false,\n      sessionId,\n      userId,\n      sessionClaims: null,\n      actor: null,\n      orgId: null,\n      orgRole: null,\n      orgSlug: null,\n      has: () => false,\n      signOut,\n      getToken\n    };\n  }\n  if (treatPendingAsSignedOut && sessionStatus === \"pending\") {\n    return {\n      isLoaded: true,\n      isSignedIn: false,\n      sessionId: null,\n      userId: null,\n      sessionClaims: null,\n      actor: null,\n      orgId: null,\n      orgRole: null,\n      orgSlug: null,\n      has: () => false,\n      signOut,\n      getToken\n    };\n  }\n  if (!!sessionId && !!sessionClaims && !!userId && !!orgId && !!orgRole) {\n    return {\n      isLoaded: true,\n      isSignedIn: true,\n      sessionId,\n      sessionClaims,\n      userId,\n      actor: actor || null,\n      orgId,\n      orgRole,\n      orgSlug: orgSlug || null,\n      has,\n      signOut,\n      getToken\n    };\n  }\n  if (!!sessionId && !!sessionClaims && !!userId && !orgId) {\n    return {\n      isLoaded: true,\n      isSignedIn: true,\n      sessionId,\n      sessionClaims,\n      userId,\n      actor: actor || null,\n      orgId: null,\n      orgRole: null,\n      orgSlug: null,\n      has,\n      signOut,\n      getToken\n    };\n  }\n};\nexport { splitByScope, validateReverificationConfig, createCheckAuthorization, resolveAuthState };","map":{"version":3,"names":["TYPES_TO_OBJECTS","strict_mfa","afterMinutes","level","strict","moderate","lax","ALLOWED_LEVELS","Set","ALLOWED_TYPES","isValidMaxAge","maxAge","isValidLevel","has","isValidVerificationType","type","prefixWithOrg","value","replace","checkOrgAuthorization","params","options","orgId","orgRole","orgPermissions","role","permission","includes","checkForFeatureOrPlan","claim","featureOrPlan","org","orgFeatures","user","userFeatures","splitByScope","scope","_id","split","id","checkBillingAuthorization","features","plans","feature","plan","fea","map","f","trim","filter","validateReverificationConfig","config","convertConfigToObject","config2","isValidStringValue","isValidObjectValue","bind","checkReverificationAuthorization","factorVerificationAge","reverification","isValidReverification","factor1Age","factor2Age","isValidFactor1","isValidFactor2","createCheckAuthorization","userId","billingAuthorization","orgAuthorization","reverificationAuthorization","some","a","every","resolveAuthState","authObject","sessionId","sessionStatus","actor","orgSlug","signOut","getToken","sessionClaims","treatPendingAsSignedOut","isLoaded","isSignedIn"],"sources":["D:\\Ripple Media Office work\\React\\wisdomwithin-clerk-new\\node_modules\\@clerk\\shared\\src\\authorization.ts"],"sourcesContent":["import type {\n  ActClaim,\n  CheckAuthorizationWithCustomPermissions,\n  GetToken,\n  JwtPayload,\n  OrganizationCustomPermissionKey,\n  OrganizationCustomRoleKey,\n  PendingSessionOptions,\n  ReverificationConfig,\n  SessionStatusClaim,\n  SessionVerificationLevel,\n  SessionVerificationTypes,\n  SignOut,\n  UseAuthReturn,\n} from '@clerk/types';\n\ntype TypesToConfig = Record<SessionVerificationTypes, Exclude<ReverificationConfig, SessionVerificationTypes>>;\ntype AuthorizationOptions = {\n  userId: string | null | undefined;\n  orgId: string | null | undefined;\n  orgRole: string | null | undefined;\n  orgPermissions: string[] | null | undefined;\n  factorVerificationAge: [number, number] | null;\n  features: string | null | undefined;\n  plans: string | null | undefined;\n};\n\ntype CheckOrgAuthorization = (\n  params: { role?: OrganizationCustomRoleKey; permission?: OrganizationCustomPermissionKey },\n  options: Pick<AuthorizationOptions, 'orgId' | 'orgRole' | 'orgPermissions'>,\n) => boolean | null;\n\ntype CheckBillingAuthorization = (\n  params: { feature?: string; plan?: string },\n  options: Pick<AuthorizationOptions, 'plans' | 'features'>,\n) => boolean | null;\n\ntype CheckReverificationAuthorization = (\n  params: {\n    reverification?: ReverificationConfig;\n  },\n  { factorVerificationAge }: AuthorizationOptions,\n) => boolean | null;\n\nconst TYPES_TO_OBJECTS: TypesToConfig = {\n  strict_mfa: {\n    afterMinutes: 10,\n    level: 'multi_factor',\n  },\n  strict: {\n    afterMinutes: 10,\n    level: 'second_factor',\n  },\n  moderate: {\n    afterMinutes: 60,\n    level: 'second_factor',\n  },\n  lax: {\n    afterMinutes: 1_440,\n    level: 'second_factor',\n  },\n};\n\nconst ALLOWED_LEVELS = new Set<SessionVerificationLevel>(['first_factor', 'second_factor', 'multi_factor']);\n\nconst ALLOWED_TYPES = new Set<SessionVerificationTypes>(['strict_mfa', 'strict', 'moderate', 'lax']);\n\n// Helper functions\nconst isValidMaxAge = (maxAge: any) => typeof maxAge === 'number' && maxAge > 0;\nconst isValidLevel = (level: any) => ALLOWED_LEVELS.has(level);\nconst isValidVerificationType = (type: any) => ALLOWED_TYPES.has(type);\n\nconst prefixWithOrg = (value: string) => value.replace(/^(org:)*/, 'org:');\n\n/**\n * Checks if a user has the required organization-level authorization.\n * Verifies if the user has the specified role or permission within their organization.\n * @returns null, if unable to determine due to missing data or unspecified role/permission.\n */\nconst checkOrgAuthorization: CheckOrgAuthorization = (params, options) => {\n  const { orgId, orgRole, orgPermissions } = options;\n  if (!params.role && !params.permission) {\n    return null;\n  }\n\n  if (!orgId || !orgRole || !orgPermissions) {\n    return null;\n  }\n\n  if (params.permission) {\n    return orgPermissions.includes(prefixWithOrg(params.permission));\n  }\n\n  if (params.role) {\n    return prefixWithOrg(orgRole) === prefixWithOrg(params.role);\n  }\n  return null;\n};\n\nconst checkForFeatureOrPlan = (claim: string, featureOrPlan: string) => {\n  const { org: orgFeatures, user: userFeatures } = splitByScope(claim);\n  const [scope, _id] = featureOrPlan.split(':');\n  const id = _id || scope;\n\n  if (scope === 'org') {\n    return orgFeatures.includes(id);\n  } else if (scope === 'user') {\n    return userFeatures.includes(id);\n  } else {\n    // Since org scoped features will not exist if there is not an active org, merging is safe.\n    return [...orgFeatures, ...userFeatures].includes(id);\n  }\n};\n\nconst checkBillingAuthorization: CheckBillingAuthorization = (params, options) => {\n  const { features, plans } = options;\n\n  if (params.feature && features) {\n    return checkForFeatureOrPlan(features, params.feature);\n  }\n\n  if (params.plan && plans) {\n    return checkForFeatureOrPlan(plans, params.plan);\n  }\n  return null;\n};\n\nconst splitByScope = (fea: string | null | undefined) => {\n  const features = fea ? fea.split(',').map(f => f.trim()) : [];\n\n  // TODO: make this more efficient\n  return {\n    org: features.filter(f => f.split(':')[0].includes('o')).map(f => f.split(':')[1]),\n    user: features.filter(f => f.split(':')[0].includes('u')).map(f => f.split(':')[1]),\n  };\n};\n\nconst validateReverificationConfig = (config: ReverificationConfig | undefined | null) => {\n  if (!config) {\n    return false;\n  }\n\n  const convertConfigToObject = (config: ReverificationConfig) => {\n    if (typeof config === 'string') {\n      return TYPES_TO_OBJECTS[config];\n    }\n    return config;\n  };\n\n  const isValidStringValue = typeof config === 'string' && isValidVerificationType(config);\n  const isValidObjectValue =\n    typeof config === 'object' && isValidLevel(config.level) && isValidMaxAge(config.afterMinutes);\n\n  if (isValidStringValue || isValidObjectValue) {\n    return convertConfigToObject.bind(null, config);\n  }\n\n  return false;\n};\n\n/**\n * Evaluates if the user meets re-verification authentication requirements.\n * Compares the user's factor verification ages against the specified maxAge.\n * Handles different verification levels (first factor, second factor, multi-factor).\n * @returns null, if requirements or verification data are missing.\n */\nconst checkReverificationAuthorization: CheckReverificationAuthorization = (params, { factorVerificationAge }) => {\n  if (!params.reverification || !factorVerificationAge) {\n    return null;\n  }\n\n  const isValidReverification = validateReverificationConfig(params.reverification);\n  if (!isValidReverification) {\n    return null;\n  }\n\n  const { level, afterMinutes } = isValidReverification();\n  const [factor1Age, factor2Age] = factorVerificationAge;\n\n  // -1 indicates the factor group (1fa,2fa) is not enabled\n  // -1 for 1fa is not a valid scenario, but we need to make sure we handle it properly\n  const isValidFactor1 = factor1Age !== -1 ? afterMinutes > factor1Age : null;\n  const isValidFactor2 = factor2Age !== -1 ? afterMinutes > factor2Age : null;\n\n  switch (level) {\n    case 'first_factor':\n      return isValidFactor1;\n    case 'second_factor':\n      return factor2Age !== -1 ? isValidFactor2 : isValidFactor1;\n    case 'multi_factor':\n      return factor2Age === -1 ? isValidFactor1 : isValidFactor1 && isValidFactor2;\n  }\n};\n\n/**\n * Creates a function for comprehensive user authorization checks.\n * Combines organization-level and reverification authentication checks.\n * The returned function authorizes if both checks pass, or if at least one passes\n * when the other is indeterminate. Fails if userId is missing.\n */\nconst createCheckAuthorization = (options: AuthorizationOptions): CheckAuthorizationWithCustomPermissions => {\n  return (params): boolean => {\n    if (!options.userId) {\n      return false;\n    }\n\n    const billingAuthorization = checkBillingAuthorization(params, options);\n    const orgAuthorization = checkOrgAuthorization(params, options);\n    const reverificationAuthorization = checkReverificationAuthorization(params, options);\n\n    if ([billingAuthorization || orgAuthorization, reverificationAuthorization].some(a => a === null)) {\n      return [billingAuthorization || orgAuthorization, reverificationAuthorization].some(a => a === true);\n    }\n\n    return [billingAuthorization || orgAuthorization, reverificationAuthorization].every(a => a === true);\n  };\n};\n\ntype AuthStateOptions = {\n  authObject: {\n    userId?: string | null;\n    sessionId?: string | null;\n    sessionStatus?: SessionStatusClaim | null;\n    sessionClaims?: JwtPayload | null;\n    actor?: ActClaim | null;\n    orgId?: string | null;\n    orgRole?: OrganizationCustomRoleKey | null;\n    orgSlug?: string | null;\n    orgPermissions?: OrganizationCustomPermissionKey[] | null;\n    getToken: GetToken;\n    signOut: SignOut;\n    has: (params: Parameters<CheckAuthorizationWithCustomPermissions>[0]) => boolean;\n  };\n  options: PendingSessionOptions;\n};\n\n/**\n * Shared utility function that centralizes auth state resolution logic,\n * preventing duplication across different packages.\n * @internal\n */\nconst resolveAuthState = ({\n  authObject: {\n    sessionId,\n    sessionStatus,\n    userId,\n    actor,\n    orgId,\n    orgRole,\n    orgSlug,\n    signOut,\n    getToken,\n    has,\n    sessionClaims,\n  },\n  options: { treatPendingAsSignedOut = true },\n}: AuthStateOptions): UseAuthReturn | undefined => {\n  if (sessionId === undefined && userId === undefined) {\n    return {\n      isLoaded: false,\n      isSignedIn: undefined,\n      sessionId,\n      sessionClaims: undefined,\n      userId,\n      actor: undefined,\n      orgId: undefined,\n      orgRole: undefined,\n      orgSlug: undefined,\n      has: undefined,\n      signOut,\n      getToken,\n    } as const;\n  }\n\n  if (sessionId === null && userId === null) {\n    return {\n      isLoaded: true,\n      isSignedIn: false,\n      sessionId,\n      userId,\n      sessionClaims: null,\n      actor: null,\n      orgId: null,\n      orgRole: null,\n      orgSlug: null,\n      has: () => false,\n      signOut,\n      getToken,\n    } as const;\n  }\n\n  if (treatPendingAsSignedOut && sessionStatus === 'pending') {\n    return {\n      isLoaded: true,\n      isSignedIn: false,\n      sessionId: null,\n      userId: null,\n      sessionClaims: null,\n      actor: null,\n      orgId: null,\n      orgRole: null,\n      orgSlug: null,\n      has: () => false,\n      signOut,\n      getToken,\n    } as const;\n  }\n\n  if (!!sessionId && !!sessionClaims && !!userId && !!orgId && !!orgRole) {\n    return {\n      isLoaded: true,\n      isSignedIn: true,\n      sessionId,\n      sessionClaims,\n      userId,\n      actor: actor || null,\n      orgId,\n      orgRole,\n      orgSlug: orgSlug || null,\n      has,\n      signOut,\n      getToken,\n    } as const;\n  }\n\n  if (!!sessionId && !!sessionClaims && !!userId && !orgId) {\n    return {\n      isLoaded: true,\n      isSignedIn: true,\n      sessionId,\n      sessionClaims,\n      userId,\n      actor: actor || null,\n      orgId: null,\n      orgRole: null,\n      orgSlug: null,\n      has,\n      signOut,\n      getToken,\n    } as const;\n  }\n};\n\nexport { createCheckAuthorization, validateReverificationConfig, resolveAuthState, splitByScope };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}