{"ast":null,"code":"// src/errors/errorThrower.ts\nimport { buildErrorThrower } from \"@clerk/shared/error\";\nvar errorThrower = buildErrorThrower({\n  packageName: \"@clerk/clerk-react\"\n});\nfunction setErrorThrowerOptions(options) {\n  errorThrower.setMessages(options).setPackageName(options);\n}\n\n// src/hooks/useAuth.ts\nimport { createCheckAuthorization, resolveAuthState } from \"@clerk/shared/authorization\";\nimport { eventMethodCalled } from \"@clerk/shared/telemetry\";\nimport { useCallback } from \"react\";\n\n// src/contexts/AuthContext.ts\nimport { createContextAndHook } from \"@clerk/shared/react\";\nvar [AuthContext, useAuthContext] = createContextAndHook(\"AuthContext\");\n\n// src/contexts/IsomorphicClerkContext.tsx\nimport { ClerkInstanceContext, useClerkInstanceContext } from \"@clerk/shared/react\";\nvar IsomorphicClerkContext = ClerkInstanceContext;\nvar useIsomorphicClerkContext = useClerkInstanceContext;\n\n// src/errors/messages.ts\nvar multipleClerkProvidersError = \"You've added multiple <ClerkProvider> components in your React component tree. Wrap your components in a single <ClerkProvider>.\";\nvar multipleChildrenInButtonComponent = name => `You've passed multiple children components to <${name}/>. You can only pass a single child component or text.`;\nvar invalidStateError = \"Invalid state. Feel free to submit a bug or reach out to support here: https://clerk.com/support\";\nvar unsupportedNonBrowserDomainOrProxyUrlFunction = \"Unsupported usage of isSatellite, domain or proxyUrl. The usage of isSatellite, domain or proxyUrl as function is not supported in non-browser environments.\";\nvar userProfilePageRenderedError = \"<UserProfile.Page /> component needs to be a direct child of `<UserProfile />` or `<UserButton />`.\";\nvar userProfileLinkRenderedError = \"<UserProfile.Link /> component needs to be a direct child of `<UserProfile />` or `<UserButton />`.\";\nvar organizationProfilePageRenderedError = \"<OrganizationProfile.Page /> component needs to be a direct child of `<OrganizationProfile />` or `<OrganizationSwitcher />`.\";\nvar organizationProfileLinkRenderedError = \"<OrganizationProfile.Link /> component needs to be a direct child of `<OrganizationProfile />` or `<OrganizationSwitcher />`.\";\nvar customPagesIgnoredComponent = componentName => `<${componentName} /> can only accept <${componentName}.Page /> and <${componentName}.Link /> as its children. Any other provided component will be ignored. Additionally, please ensure that the component is rendered in a client component.`;\nvar customPageWrongProps = componentName => `Missing props. <${componentName}.Page /> component requires the following props: url, label, labelIcon, alongside with children to be rendered inside the page.`;\nvar customLinkWrongProps = componentName => `Missing props. <${componentName}.Link /> component requires the following props: url, label and labelIcon.`;\nvar noPathProvidedError = componentName => `The <${componentName}/> component uses path-based routing by default unless a different routing strategy is provided using the \\`routing\\` prop. When path-based routing is used, you need to provide the path where the component is mounted on by using the \\`path\\` prop. Example: <${componentName} path={'/my-path'} />`;\nvar incompatibleRoutingWithPathProvidedError = componentName => `The \\`path\\` prop will only be respected when the Clerk component uses path-based routing. To resolve this error, pass \\`routing='path'\\` to the <${componentName}/> component, or drop the \\`path\\` prop to switch to hash-based routing. For more details please refer to our docs: https://clerk.com/docs`;\nvar userButtonIgnoredComponent = `<UserButton /> can only accept <UserButton.UserProfilePage />, <UserButton.UserProfileLink /> and <UserButton.MenuItems /> as its children. Any other provided component will be ignored. Additionally, please ensure that the component is rendered in a client component.`;\nvar customMenuItemsIgnoredComponent = \"<UserButton.MenuItems /> component can only accept <UserButton.Action /> and <UserButton.Link /> as its children. Any other provided component will be ignored. Additionally, please ensure that the component is rendered in a client component.\";\nvar userButtonMenuItemsRenderedError = \"<UserButton.MenuItems /> component needs to be a direct child of `<UserButton />`.\";\nvar userButtonMenuActionRenderedError = \"<UserButton.Action /> component needs to be a direct child of `<UserButton.MenuItems />`.\";\nvar userButtonMenuLinkRenderedError = \"<UserButton.Link /> component needs to be a direct child of `<UserButton.MenuItems />`.\";\nvar userButtonMenuItemLinkWrongProps = \"Missing props. <UserButton.Link /> component requires the following props: href, label and labelIcon.\";\nvar userButtonMenuItemsActionWrongsProps = \"Missing props. <UserButton.Action /> component requires the following props: label.\";\n\n// src/hooks/useAssertWrappedByClerkProvider.ts\nimport { useAssertWrappedByClerkProvider as useSharedAssertWrappedByClerkProvider } from \"@clerk/shared/react\";\nvar useAssertWrappedByClerkProvider = source => {\n  useSharedAssertWrappedByClerkProvider(() => {\n    errorThrower.throwMissingClerkProviderError({\n      source\n    });\n  });\n};\n\n// src/hooks/utils.ts\nvar clerkLoaded = isomorphicClerk => {\n  return new Promise(resolve => {\n    const handler = status => {\n      if ([\"ready\", \"degraded\"].includes(status)) {\n        resolve();\n        isomorphicClerk.off(\"status\", handler);\n      }\n    };\n    isomorphicClerk.on(\"status\", handler, {\n      notify: true\n    });\n  });\n};\nvar createGetToken = isomorphicClerk => {\n  return async options => {\n    await clerkLoaded(isomorphicClerk);\n    if (!isomorphicClerk.session) {\n      return null;\n    }\n    return isomorphicClerk.session.getToken(options);\n  };\n};\nvar createSignOut = isomorphicClerk => {\n  return async (...args) => {\n    await clerkLoaded(isomorphicClerk);\n    return isomorphicClerk.signOut(...args);\n  };\n};\n\n// src/hooks/useAuth.ts\nvar useAuth = (initialAuthStateOrOptions = {}) => {\n  var _a, _b;\n  useAssertWrappedByClerkProvider(\"useAuth\");\n  const {\n    treatPendingAsSignedOut,\n    ...rest\n  } = initialAuthStateOrOptions != null ? initialAuthStateOrOptions : {};\n  const initialAuthState = rest;\n  const authContextFromHook = useAuthContext();\n  let authContext = authContextFromHook;\n  if (authContext.sessionId === void 0 && authContext.userId === void 0) {\n    authContext = initialAuthState != null ? initialAuthState : {};\n  }\n  const isomorphicClerk = useIsomorphicClerkContext();\n  const getToken = useCallback(createGetToken(isomorphicClerk), [isomorphicClerk]);\n  const signOut = useCallback(createSignOut(isomorphicClerk), [isomorphicClerk]);\n  (_a = isomorphicClerk.telemetry) == null ? void 0 : _a.record(eventMethodCalled(\"useAuth\", {\n    treatPendingAsSignedOut\n  }));\n  return useDerivedAuth({\n    ...authContext,\n    getToken,\n    signOut\n  }, {\n    treatPendingAsSignedOut: treatPendingAsSignedOut != null ? treatPendingAsSignedOut : (_b = isomorphicClerk.__internal_getOption) == null ? void 0 : _b.call(isomorphicClerk, \"treatPendingAsSignedOut\")\n  });\n};\nfunction useDerivedAuth(authObject, {\n  treatPendingAsSignedOut = true\n} = {}) {\n  const {\n    userId,\n    orgId,\n    orgRole,\n    has,\n    signOut,\n    getToken,\n    orgPermissions,\n    factorVerificationAge,\n    sessionClaims\n  } = authObject != null ? authObject : {};\n  const derivedHas = useCallback(params => {\n    if (has) {\n      return has(params);\n    }\n    return createCheckAuthorization({\n      userId,\n      orgId,\n      orgRole,\n      orgPermissions,\n      factorVerificationAge,\n      features: (sessionClaims == null ? void 0 : sessionClaims.fea) || \"\",\n      plans: (sessionClaims == null ? void 0 : sessionClaims.pla) || \"\"\n    })(params);\n  }, [has, userId, orgId, orgRole, orgPermissions, factorVerificationAge]);\n  const payload = resolveAuthState({\n    authObject: {\n      ...authObject,\n      getToken,\n      signOut,\n      has: derivedHas\n    },\n    options: {\n      treatPendingAsSignedOut\n    }\n  });\n  if (!payload) {\n    return errorThrower.throw(invalidStateError);\n  }\n  return payload;\n}\n\n// src/hooks/useEmailLink.ts\nimport React from \"react\";\nfunction useEmailLink(resource) {\n  const {\n    startEmailLinkFlow,\n    cancelEmailLinkFlow\n  } = React.useMemo(() => resource.createEmailLinkFlow(), [resource]);\n  React.useEffect(() => {\n    return cancelEmailLinkFlow;\n  }, []);\n  return {\n    startEmailLinkFlow,\n    cancelEmailLinkFlow\n  };\n}\n\n// src/hooks/useSignIn.ts\nimport { useClientContext } from \"@clerk/shared/react\";\nimport { eventMethodCalled as eventMethodCalled2 } from \"@clerk/shared/telemetry\";\nvar useSignIn = () => {\n  var _a;\n  useAssertWrappedByClerkProvider(\"useSignIn\");\n  const isomorphicClerk = useIsomorphicClerkContext();\n  const client = useClientContext();\n  (_a = isomorphicClerk.telemetry) == null ? void 0 : _a.record(eventMethodCalled2(\"useSignIn\"));\n  if (!client) {\n    return {\n      isLoaded: false,\n      signIn: void 0,\n      setActive: void 0\n    };\n  }\n  return {\n    isLoaded: true,\n    signIn: client.signIn,\n    setActive: isomorphicClerk.setActive\n  };\n};\n\n// src/hooks/useSignUp.ts\nimport { useClientContext as useClientContext2 } from \"@clerk/shared/react\";\nimport { eventMethodCalled as eventMethodCalled3 } from \"@clerk/shared/telemetry\";\nvar useSignUp = () => {\n  var _a;\n  useAssertWrappedByClerkProvider(\"useSignUp\");\n  const isomorphicClerk = useIsomorphicClerkContext();\n  const client = useClientContext2();\n  (_a = isomorphicClerk.telemetry) == null ? void 0 : _a.record(eventMethodCalled3(\"useSignUp\"));\n  if (!client) {\n    return {\n      isLoaded: false,\n      signUp: void 0,\n      setActive: void 0\n    };\n  }\n  return {\n    isLoaded: true,\n    signUp: client.signUp,\n    setActive: isomorphicClerk.setActive\n  };\n};\n\n// src/hooks/index.ts\nimport { useClerk, useOrganization, useOrganizationList, useSessionList, useUser, useSession, useReverification, __experimental_usePaymentElement, __experimental_PaymentElementProvider, __experimental_PaymentElement } from \"@clerk/shared/react\";\n\n// src/components/controlComponents.tsx\nimport { deprecated } from \"@clerk/shared/deprecated\";\nimport React3 from \"react\";\n\n// src/contexts/SessionContext.tsx\nimport { SessionContext, useSessionContext } from \"@clerk/shared/react\";\n\n// src/components/withClerk.tsx\nimport React2 from \"react\";\nvar withClerk = (Component, displayNameOrOptions) => {\n  const passedDisplayedName = typeof displayNameOrOptions === \"string\" ? displayNameOrOptions : displayNameOrOptions == null ? void 0 : displayNameOrOptions.component;\n  const displayName = passedDisplayedName || Component.displayName || Component.name || \"Component\";\n  Component.displayName = displayName;\n  const options = typeof displayNameOrOptions === \"string\" ? void 0 : displayNameOrOptions;\n  const HOC = props => {\n    useAssertWrappedByClerkProvider(displayName || \"withClerk\");\n    const clerk = useIsomorphicClerkContext();\n    if (!clerk.loaded && !(options == null ? void 0 : options.renderWhileLoading)) {\n      return null;\n    }\n    return /* @__PURE__ */React2.createElement(Component, {\n      ...props,\n      component: displayName,\n      clerk\n    });\n  };\n  HOC.displayName = `withClerk(${displayName})`;\n  return HOC;\n};\n\n// src/components/controlComponents.tsx\nvar SignedIn = ({\n  children,\n  treatPendingAsSignedOut\n}) => {\n  useAssertWrappedByClerkProvider(\"SignedIn\");\n  const {\n    userId\n  } = useAuth({\n    treatPendingAsSignedOut\n  });\n  if (userId) {\n    return children;\n  }\n  return null;\n};\nvar SignedOut = ({\n  children,\n  treatPendingAsSignedOut\n}) => {\n  useAssertWrappedByClerkProvider(\"SignedOut\");\n  const {\n    userId\n  } = useAuth({\n    treatPendingAsSignedOut\n  });\n  if (userId === null) {\n    return children;\n  }\n  return null;\n};\nvar ClerkLoaded = ({\n  children\n}) => {\n  useAssertWrappedByClerkProvider(\"ClerkLoaded\");\n  const isomorphicClerk = useIsomorphicClerkContext();\n  if (!isomorphicClerk.loaded) {\n    return null;\n  }\n  return children;\n};\nvar ClerkLoading = ({\n  children\n}) => {\n  useAssertWrappedByClerkProvider(\"ClerkLoading\");\n  const isomorphicClerk = useIsomorphicClerkContext();\n  if (isomorphicClerk.status !== \"loading\") {\n    return null;\n  }\n  return children;\n};\nvar ClerkFailed = ({\n  children\n}) => {\n  useAssertWrappedByClerkProvider(\"ClerkFailed\");\n  const isomorphicClerk = useIsomorphicClerkContext();\n  if (isomorphicClerk.status !== \"error\") {\n    return null;\n  }\n  return children;\n};\nvar ClerkDegraded = ({\n  children\n}) => {\n  useAssertWrappedByClerkProvider(\"ClerkDegraded\");\n  const isomorphicClerk = useIsomorphicClerkContext();\n  if (isomorphicClerk.status !== \"degraded\") {\n    return null;\n  }\n  return children;\n};\nvar Protect = ({\n  children,\n  fallback,\n  treatPendingAsSignedOut,\n  ...restAuthorizedParams\n}) => {\n  useAssertWrappedByClerkProvider(\"Protect\");\n  const {\n    isLoaded,\n    has,\n    userId\n  } = useAuth({\n    treatPendingAsSignedOut\n  });\n  if (!isLoaded) {\n    return null;\n  }\n  const unauthorized = fallback != null ? fallback : null;\n  const authorized = children;\n  if (!userId) {\n    return unauthorized;\n  }\n  if (typeof restAuthorizedParams.condition === \"function\") {\n    if (restAuthorizedParams.condition(has)) {\n      return authorized;\n    }\n    return unauthorized;\n  }\n  if (restAuthorizedParams.role || restAuthorizedParams.permission || restAuthorizedParams.feature || restAuthorizedParams.plan) {\n    if (has(restAuthorizedParams)) {\n      return authorized;\n    }\n    return unauthorized;\n  }\n  return authorized;\n};\nvar RedirectToSignIn = withClerk(({\n  clerk,\n  ...props\n}) => {\n  const {\n    client,\n    session\n  } = clerk;\n  const hasSignedInSessions = client.signedInSessions ? client.signedInSessions.length > 0 :\n  // Compat for clerk-js<5.54.0 (which was released with the `signedInSessions` property)\n  client.activeSessions && client.activeSessions.length > 0;\n  React3.useEffect(() => {\n    if (session === null && hasSignedInSessions) {\n      void clerk.redirectToAfterSignOut();\n    } else {\n      void clerk.redirectToSignIn(props);\n    }\n  }, []);\n  return null;\n}, \"RedirectToSignIn\");\nvar RedirectToSignUp = withClerk(({\n  clerk,\n  ...props\n}) => {\n  React3.useEffect(() => {\n    void clerk.redirectToSignUp(props);\n  }, []);\n  return null;\n}, \"RedirectToSignUp\");\nvar RedirectToUserProfile = withClerk(({\n  clerk\n}) => {\n  React3.useEffect(() => {\n    deprecated(\"RedirectToUserProfile\", \"Use the `redirectToUserProfile()` method instead.\");\n    void clerk.redirectToUserProfile();\n  }, []);\n  return null;\n}, \"RedirectToUserProfile\");\nvar RedirectToOrganizationProfile = withClerk(({\n  clerk\n}) => {\n  React3.useEffect(() => {\n    deprecated(\"RedirectToOrganizationProfile\", \"Use the `redirectToOrganizationProfile()` method instead.\");\n    void clerk.redirectToOrganizationProfile();\n  }, []);\n  return null;\n}, \"RedirectToOrganizationProfile\");\nvar RedirectToCreateOrganization = withClerk(({\n  clerk\n}) => {\n  React3.useEffect(() => {\n    deprecated(\"RedirectToCreateOrganization\", \"Use the `redirectToCreateOrganization()` method instead.\");\n    void clerk.redirectToCreateOrganization();\n  }, []);\n  return null;\n}, \"RedirectToCreateOrganization\");\nvar AuthenticateWithRedirectCallback = withClerk(({\n  clerk,\n  ...handleRedirectCallbackParams\n}) => {\n  React3.useEffect(() => {\n    void clerk.handleRedirectCallback(handleRedirectCallbackParams);\n  }, []);\n  return null;\n}, \"AuthenticateWithRedirectCallback\");\nvar MultisessionAppSupport = ({\n  children\n}) => {\n  useAssertWrappedByClerkProvider(\"MultisessionAppSupport\");\n  const session = useSessionContext();\n  return /* @__PURE__ */React3.createElement(React3.Fragment, {\n    key: session ? session.id : \"no-users\"\n  }, children);\n};\nexport { errorThrower, setErrorThrowerOptions, multipleClerkProvidersError, multipleChildrenInButtonComponent, unsupportedNonBrowserDomainOrProxyUrlFunction, userProfilePageRenderedError, userProfileLinkRenderedError, organizationProfilePageRenderedError, organizationProfileLinkRenderedError, customPagesIgnoredComponent, customPageWrongProps, customLinkWrongProps, noPathProvidedError, incompatibleRoutingWithPathProvidedError, userButtonIgnoredComponent, customMenuItemsIgnoredComponent, userButtonMenuItemsRenderedError, userButtonMenuActionRenderedError, userButtonMenuLinkRenderedError, userButtonMenuItemLinkWrongProps, userButtonMenuItemsActionWrongsProps, IsomorphicClerkContext, withClerk, AuthContext, useAuth, useDerivedAuth, useEmailLink, useSignIn, useSignUp, useClerk, useOrganization, useOrganizationList, useSessionList, useUser, useSession, useReverification, __experimental_usePaymentElement, __experimental_PaymentElementProvider, __experimental_PaymentElement, SignedIn, SignedOut, ClerkLoaded, ClerkLoading, ClerkFailed, ClerkDegraded, Protect, RedirectToSignIn, RedirectToSignUp, RedirectToUserProfile, RedirectToOrganizationProfile, RedirectToCreateOrganization, AuthenticateWithRedirectCallback, MultisessionAppSupport };","map":{"version":3,"names":["buildErrorThrower","errorThrower","packageName","setErrorThrowerOptions","options","setMessages","setPackageName","createCheckAuthorization","resolveAuthState","eventMethodCalled","useCallback","createContextAndHook","AuthContext","useAuthContext","ClerkInstanceContext","useClerkInstanceContext","IsomorphicClerkContext","useIsomorphicClerkContext","multipleClerkProvidersError","multipleChildrenInButtonComponent","name","invalidStateError","unsupportedNonBrowserDomainOrProxyUrlFunction","userProfilePageRenderedError","userProfileLinkRenderedError","organizationProfilePageRenderedError","organizationProfileLinkRenderedError","customPagesIgnoredComponent","componentName","customPageWrongProps","customLinkWrongProps","noPathProvidedError","incompatibleRoutingWithPathProvidedError","userButtonIgnoredComponent","customMenuItemsIgnoredComponent","userButtonMenuItemsRenderedError","userButtonMenuActionRenderedError","userButtonMenuLinkRenderedError","userButtonMenuItemLinkWrongProps","userButtonMenuItemsActionWrongsProps","useAssertWrappedByClerkProvider","useSharedAssertWrappedByClerkProvider","source","throwMissingClerkProviderError","clerkLoaded","isomorphicClerk","Promise","resolve","handler","status","includes","off","on","notify","createGetToken","session","getToken","createSignOut","args","signOut","useAuth","initialAuthStateOrOptions","_a","_b","treatPendingAsSignedOut","rest","initialAuthState","authContextFromHook","authContext","sessionId","userId","telemetry","record","useDerivedAuth","__internal_getOption","call","authObject","orgId","orgRole","has","orgPermissions","factorVerificationAge","sessionClaims","derivedHas","params","features","fea","plans","pla","payload","throw","React","useEmailLink","resource","startEmailLinkFlow","cancelEmailLinkFlow","useMemo","createEmailLinkFlow","useEffect","useClientContext","eventMethodCalled2","useSignIn","client","isLoaded","signIn","setActive","useClientContext2","eventMethodCalled3","useSignUp","signUp","useClerk","useOrganization","useOrganizationList","useSessionList","useUser","useSession","useReverification","__experimental_usePaymentElement","__experimental_PaymentElementProvider","__experimental_PaymentElement","deprecated","React3","SessionContext","useSessionContext","React2","withClerk","Component","displayNameOrOptions","passedDisplayedName","component","displayName","HOC","props","clerk","loaded","renderWhileLoading","createElement","SignedIn","children","SignedOut","ClerkLoaded","ClerkLoading","ClerkFailed","ClerkDegraded","Protect","fallback","restAuthorizedParams","unauthorized","authorized","condition","role","permission","feature","plan","RedirectToSignIn","hasSignedInSessions","signedInSessions","length","activeSessions","redirectToAfterSignOut","redirectToSignIn","RedirectToSignUp","redirectToSignUp","RedirectToUserProfile","redirectToUserProfile","RedirectToOrganizationProfile","redirectToOrganizationProfile","RedirectToCreateOrganization","redirectToCreateOrganization","AuthenticateWithRedirectCallback","handleRedirectCallbackParams","handleRedirectCallback","MultisessionAppSupport","Fragment","key","id"],"sources":["D:\\Ripple Media Office work\\React\\wisdomwithin-clerk-new\\node_modules\\@clerk\\clerk-react\\src\\errors\\errorThrower.ts","D:\\Ripple Media Office work\\React\\wisdomwithin-clerk-new\\node_modules\\@clerk\\clerk-react\\src\\hooks\\useAuth.ts","D:\\Ripple Media Office work\\React\\wisdomwithin-clerk-new\\node_modules\\@clerk\\clerk-react\\src\\contexts\\AuthContext.ts","D:\\Ripple Media Office work\\React\\wisdomwithin-clerk-new\\node_modules\\@clerk\\clerk-react\\src\\contexts\\IsomorphicClerkContext.tsx","D:\\Ripple Media Office work\\React\\wisdomwithin-clerk-new\\node_modules\\@clerk\\clerk-react\\src\\errors\\messages.ts","D:\\Ripple Media Office work\\React\\wisdomwithin-clerk-new\\node_modules\\@clerk\\clerk-react\\src\\hooks\\useAssertWrappedByClerkProvider.ts","D:\\Ripple Media Office work\\React\\wisdomwithin-clerk-new\\node_modules\\@clerk\\clerk-react\\src\\hooks\\utils.ts","D:\\Ripple Media Office work\\React\\wisdomwithin-clerk-new\\node_modules\\@clerk\\clerk-react\\src\\hooks\\useEmailLink.ts","D:\\Ripple Media Office work\\React\\wisdomwithin-clerk-new\\node_modules\\@clerk\\clerk-react\\src\\hooks\\useSignIn.ts","D:\\Ripple Media Office work\\React\\wisdomwithin-clerk-new\\node_modules\\@clerk\\clerk-react\\src\\hooks\\useSignUp.ts","D:\\Ripple Media Office work\\React\\wisdomwithin-clerk-new\\node_modules\\@clerk\\clerk-react\\src\\hooks\\index.ts","D:\\Ripple Media Office work\\React\\wisdomwithin-clerk-new\\node_modules\\@clerk\\clerk-react\\src\\components\\controlComponents.tsx","D:\\Ripple Media Office work\\React\\wisdomwithin-clerk-new\\node_modules\\@clerk\\clerk-react\\src\\contexts\\SessionContext.tsx","D:\\Ripple Media Office work\\React\\wisdomwithin-clerk-new\\node_modules\\@clerk\\clerk-react\\src\\components\\withClerk.tsx"],"sourcesContent":["import type { ErrorThrowerOptions } from '@clerk/shared/error';\nimport { buildErrorThrower } from '@clerk/shared/error';\n\nconst errorThrower = buildErrorThrower({ packageName: '@clerk/clerk-react' });\n\nexport { errorThrower };\n\n/**\n * Overrides options of the internal errorThrower (eg setting packageName prefix).\n *\n * @internal\n */\nexport function setErrorThrowerOptions(options: ErrorThrowerOptions) {\n  errorThrower.setMessages(options).setPackageName(options);\n}\n","import { createCheckAuthorization, resolveAuthState } from '@clerk/shared/authorization';\nimport { eventMethodCalled } from '@clerk/shared/telemetry';\nimport type {\n  CheckAuthorizationWithCustomPermissions,\n  GetToken,\n  JwtPayload,\n  PendingSessionOptions,\n  SignOut,\n  UseAuthReturn,\n} from '@clerk/types';\nimport { useCallback } from 'react';\n\nimport { useAuthContext } from '../contexts/AuthContext';\nimport { useIsomorphicClerkContext } from '../contexts/IsomorphicClerkContext';\nimport { errorThrower } from '../errors/errorThrower';\nimport { invalidStateError } from '../errors/messages';\nimport { useAssertWrappedByClerkProvider } from './useAssertWrappedByClerkProvider';\nimport { createGetToken, createSignOut } from './utils';\n\n/**\n * @inline\n */\ntype UseAuthOptions = Record<string, any> | PendingSessionOptions | undefined | null;\n\n/**\n * The `useAuth()` hook provides access to the current user's authentication state and methods to manage the active session.\n *\n * > [!NOTE]\n * > To access auth data server-side, see the [`Auth` object reference doc](https://clerk.com/docs/references/backend/types/auth-object).\n *\n * <If sdk=\"nextjs\">\n * By default, Next.js opts all routes into static rendering. If you need to opt a route or routes into dynamic rendering because you need to access the authentication data at request time, you can create a boundary by passing the `dynamic` prop to `<ClerkProvider>`. See the [guide on rendering modes](https://clerk.com/docs/references/nextjs/rendering-modes) for more information, including code examples.\n * </If>\n *\n * @unionReturnHeadings\n * [\"Initialization\", \"Signed out\", \"Signed in (no active organization)\", \"Signed in (with active organization)\"]\n *\n * @param [initialAuthStateOrOptions] - An object containing the initial authentication state or options for the `useAuth()` hook. If not provided, the hook will attempt to derive the state from the context. `treatPendingAsSignedOut` is a boolean that indicates whether pending sessions are considered as signed out or not. Defaults to `true`.\n *\n * @function\n *\n * @example\n *\n * The following example demonstrates how to use the `useAuth()` hook to access the current auth state, like whether the user is signed in or not. It also includes a basic example for using the `getToken()` method to retrieve a session token for fetching data from an external resource.\n *\n * <Tabs items='React,Next.js'>\n * <Tab>\n *\n * ```tsx {{ filename: 'src/pages/ExternalDataPage.tsx' }}\n * import { useAuth } from '@clerk/clerk-react'\n *\n * export default function ExternalDataPage() {\n *   const { userId, sessionId, getToken, isLoaded, isSignedIn } = useAuth()\n *\n *   const fetchExternalData = async () => {\n *     const token = await getToken()\n *\n *     // Fetch data from an external API\n *     const response = await fetch('https://api.example.com/data', {\n *       headers: {\n *         Authorization: `Bearer ${token}`,\n *       },\n *     })\n *\n *     return response.json()\n *   }\n *\n *   if (!isLoaded) {\n *     return <div>Loading...</div>\n *   }\n *\n *   if (!isSignedIn) {\n *     return <div>Sign in to view this page</div>\n *   }\n *\n *   return (\n *     <div>\n *       <p>\n *         Hello, {userId}! Your current active session is {sessionId}.\n *       </p>\n *       <button onClick={fetchExternalData}>Fetch Data</button>\n *     </div>\n *   )\n * }\n * ```\n *\n * </Tab>\n * <Tab>\n *\n * {@include ../../docs/use-auth.md#nextjs-01}\n *\n * </Tab>\n * </Tabs>\n */\nexport const useAuth = (initialAuthStateOrOptions: UseAuthOptions = {}): UseAuthReturn => {\n  useAssertWrappedByClerkProvider('useAuth');\n\n  const { treatPendingAsSignedOut, ...rest } = initialAuthStateOrOptions ?? {};\n  const initialAuthState = rest as any;\n\n  const authContextFromHook = useAuthContext();\n  let authContext = authContextFromHook;\n\n  if (authContext.sessionId === undefined && authContext.userId === undefined) {\n    authContext = initialAuthState != null ? initialAuthState : {};\n  }\n\n  const isomorphicClerk = useIsomorphicClerkContext();\n  const getToken: GetToken = useCallback(createGetToken(isomorphicClerk), [isomorphicClerk]);\n  const signOut: SignOut = useCallback(createSignOut(isomorphicClerk), [isomorphicClerk]);\n\n  isomorphicClerk.telemetry?.record(eventMethodCalled('useAuth', { treatPendingAsSignedOut }));\n\n  return useDerivedAuth(\n    {\n      ...authContext,\n      getToken,\n      signOut,\n    },\n    {\n      treatPendingAsSignedOut:\n        treatPendingAsSignedOut ?? isomorphicClerk.__internal_getOption?.('treatPendingAsSignedOut'),\n    },\n  );\n};\n\n/**\n * A hook that derives and returns authentication state and utility functions based on the provided auth object.\n *\n * @param authObject - An object containing authentication-related properties and functions.\n *\n * @returns A derived authentication state with helper methods. If the authentication state is invalid, an error is thrown.\n *\n * @remarks\n * This hook inspects session, user, and organization information to determine the current authentication state.\n * It returns an object that includes various properties such as whether the state is loaded, if a user is signed in,\n * session and user identifiers, organization roles, and a `has` function for authorization checks.\n * Additionally, it provides `signOut` and `getToken` functions if applicable.\n *\n * @example\n * ```tsx\n * const {\n *   isLoaded,\n *   isSignedIn,\n *   userId,\n *   orgId,\n *   has,\n *   signOut,\n *   getToken\n * } = useDerivedAuth(authObject);\n * ```\n */\nexport function useDerivedAuth(\n  authObject: any,\n  { treatPendingAsSignedOut = true }: PendingSessionOptions = {},\n): UseAuthReturn {\n  const { userId, orgId, orgRole, has, signOut, getToken, orgPermissions, factorVerificationAge, sessionClaims } =\n    authObject ?? {};\n\n  const derivedHas = useCallback(\n    (params: Parameters<CheckAuthorizationWithCustomPermissions>[0]) => {\n      if (has) {\n        return has(params);\n      }\n      return createCheckAuthorization({\n        userId,\n        orgId,\n        orgRole,\n        orgPermissions,\n        factorVerificationAge,\n        features: ((sessionClaims as JwtPayload | undefined)?.fea as string) || '',\n        plans: ((sessionClaims as JwtPayload | undefined)?.pla as string) || '',\n      })(params);\n    },\n    [has, userId, orgId, orgRole, orgPermissions, factorVerificationAge],\n  );\n\n  const payload = resolveAuthState({\n    authObject: {\n      ...authObject,\n      getToken,\n      signOut,\n      has: derivedHas,\n    },\n    options: {\n      treatPendingAsSignedOut,\n    },\n  });\n\n  if (!payload) {\n    return errorThrower.throw(invalidStateError);\n  }\n\n  return payload;\n}\n","import { createContextAndHook } from '@clerk/shared/react';\nimport type {\n  ActClaim,\n  JwtPayload,\n  OrganizationCustomPermissionKey,\n  OrganizationCustomRoleKey,\n  SessionStatusClaim,\n} from '@clerk/types';\n\nexport type AuthContextValue = {\n  userId: string | null | undefined;\n  sessionId: string | null | undefined;\n  sessionStatus: SessionStatusClaim | null | undefined;\n  sessionClaims: JwtPayload | null | undefined;\n  actor: ActClaim | null | undefined;\n  orgId: string | null | undefined;\n  orgRole: OrganizationCustomRoleKey | null | undefined;\n  orgSlug: string | null | undefined;\n  orgPermissions: OrganizationCustomPermissionKey[] | null | undefined;\n  factorVerificationAge: [number, number] | null;\n};\n\nexport const [AuthContext, useAuthContext] = createContextAndHook<AuthContextValue>('AuthContext');\n","import { ClerkInstanceContext, useClerkInstanceContext } from '@clerk/shared/react';\n\nimport type { IsomorphicClerk } from '../isomorphicClerk';\n\nexport const IsomorphicClerkContext = ClerkInstanceContext;\nexport const useIsomorphicClerkContext = useClerkInstanceContext as unknown as () => IsomorphicClerk;\n","export const noClerkProviderError = 'You must wrap your application in a <ClerkProvider> component.';\n\nexport const multipleClerkProvidersError =\n  \"You've added multiple <ClerkProvider> components in your React component tree. Wrap your components in a single <ClerkProvider>.\";\n\nexport const multipleChildrenInButtonComponent = (name: string) =>\n  `You've passed multiple children components to <${name}/>. You can only pass a single child component or text.`;\n\nexport const invalidStateError =\n  'Invalid state. Feel free to submit a bug or reach out to support here: https://clerk.com/support';\n\nexport const unsupportedNonBrowserDomainOrProxyUrlFunction =\n  'Unsupported usage of isSatellite, domain or proxyUrl. The usage of isSatellite, domain or proxyUrl as function is not supported in non-browser environments.';\n\nexport const userProfilePageRenderedError =\n  '<UserProfile.Page /> component needs to be a direct child of `<UserProfile />` or `<UserButton />`.';\nexport const userProfileLinkRenderedError =\n  '<UserProfile.Link /> component needs to be a direct child of `<UserProfile />` or `<UserButton />`.';\n\nexport const organizationProfilePageRenderedError =\n  '<OrganizationProfile.Page /> component needs to be a direct child of `<OrganizationProfile />` or `<OrganizationSwitcher />`.';\nexport const organizationProfileLinkRenderedError =\n  '<OrganizationProfile.Link /> component needs to be a direct child of `<OrganizationProfile />` or `<OrganizationSwitcher />`.';\n\nexport const customPagesIgnoredComponent = (componentName: string) =>\n  `<${componentName} /> can only accept <${componentName}.Page /> and <${componentName}.Link /> as its children. Any other provided component will be ignored. Additionally, please ensure that the component is rendered in a client component.`;\n\nexport const customPageWrongProps = (componentName: string) =>\n  `Missing props. <${componentName}.Page /> component requires the following props: url, label, labelIcon, alongside with children to be rendered inside the page.`;\n\nexport const customLinkWrongProps = (componentName: string) =>\n  `Missing props. <${componentName}.Link /> component requires the following props: url, label and labelIcon.`;\n\nexport const useAuthHasRequiresRoleOrPermission =\n  'Missing parameters. `has` from `useAuth` requires a permission or role key to be passed. Example usage: `has({permission: \"org:posts:edit\"`';\n\nexport const noPathProvidedError = (componentName: string) =>\n  `The <${componentName}/> component uses path-based routing by default unless a different routing strategy is provided using the \\`routing\\` prop. When path-based routing is used, you need to provide the path where the component is mounted on by using the \\`path\\` prop. Example: <${componentName} path={'/my-path'} />`;\n\nexport const incompatibleRoutingWithPathProvidedError = (componentName: string) =>\n  `The \\`path\\` prop will only be respected when the Clerk component uses path-based routing. To resolve this error, pass \\`routing='path'\\` to the <${componentName}/> component, or drop the \\`path\\` prop to switch to hash-based routing. For more details please refer to our docs: https://clerk.com/docs`;\n\nexport const userButtonIgnoredComponent = `<UserButton /> can only accept <UserButton.UserProfilePage />, <UserButton.UserProfileLink /> and <UserButton.MenuItems /> as its children. Any other provided component will be ignored. Additionally, please ensure that the component is rendered in a client component.`;\n\nexport const customMenuItemsIgnoredComponent =\n  '<UserButton.MenuItems /> component can only accept <UserButton.Action /> and <UserButton.Link /> as its children. Any other provided component will be ignored. Additionally, please ensure that the component is rendered in a client component.';\n\nexport const userButtonMenuItemsRenderedError =\n  '<UserButton.MenuItems /> component needs to be a direct child of `<UserButton />`.';\n\nexport const userButtonMenuActionRenderedError =\n  '<UserButton.Action /> component needs to be a direct child of `<UserButton.MenuItems />`.';\n\nexport const userButtonMenuLinkRenderedError =\n  '<UserButton.Link /> component needs to be a direct child of `<UserButton.MenuItems />`.';\n\nexport const userButtonMenuItemLinkWrongProps =\n  'Missing props. <UserButton.Link /> component requires the following props: href, label and labelIcon.';\n\nexport const userButtonMenuItemsActionWrongsProps =\n  'Missing props. <UserButton.Action /> component requires the following props: label.';\n","import { useAssertWrappedByClerkProvider as useSharedAssertWrappedByClerkProvider } from '@clerk/shared/react';\n\nimport { errorThrower } from '../errors/errorThrower';\n\nexport const useAssertWrappedByClerkProvider = (source: string): void => {\n  useSharedAssertWrappedByClerkProvider(() => {\n    errorThrower.throwMissingClerkProviderError({ source });\n  });\n};\n","import type { IsomorphicClerk } from '../isomorphicClerk';\n\n/**\n * @internal\n */\nconst clerkLoaded = (isomorphicClerk: IsomorphicClerk) => {\n  return new Promise<void>(resolve => {\n    const handler = (status: string) => {\n      if (['ready', 'degraded'].includes(status)) {\n        resolve();\n        isomorphicClerk.off('status', handler);\n      }\n    };\n\n    // Register the event listener\n    isomorphicClerk.on('status', handler, { notify: true });\n  });\n};\n\n/**\n * @internal\n */\nexport const createGetToken = (isomorphicClerk: IsomorphicClerk) => {\n  return async (options: any) => {\n    await clerkLoaded(isomorphicClerk);\n    if (!isomorphicClerk.session) {\n      return null;\n    }\n    return isomorphicClerk.session.getToken(options);\n  };\n};\n\n/**\n * @internal\n */\nexport const createSignOut = (isomorphicClerk: IsomorphicClerk) => {\n  return async (...args: any) => {\n    await clerkLoaded(isomorphicClerk);\n    return isomorphicClerk.signOut(...args);\n  };\n};\n","import type {\n  CreateEmailLinkFlowReturn,\n  EmailAddressResource,\n  SignInResource,\n  SignInStartEmailLinkFlowParams,\n  SignUpResource,\n  StartEmailLinkFlowParams,\n} from '@clerk/types';\nimport React from 'react';\n\ntype EmailLinkable = SignUpResource | EmailAddressResource | SignInResource;\ntype UseEmailLinkSignInReturn = CreateEmailLinkFlowReturn<SignInStartEmailLinkFlowParams, SignInResource>;\ntype UseEmailLinkSignUpReturn = CreateEmailLinkFlowReturn<StartEmailLinkFlowParams, SignUpResource>;\ntype UseEmailLinkEmailAddressReturn = CreateEmailLinkFlowReturn<StartEmailLinkFlowParams, EmailAddressResource>;\n\nfunction useEmailLink(resource: SignInResource): UseEmailLinkSignInReturn;\nfunction useEmailLink(resource: SignUpResource): UseEmailLinkSignUpReturn;\nfunction useEmailLink(resource: EmailAddressResource): UseEmailLinkEmailAddressReturn;\nfunction useEmailLink(\n  resource: EmailLinkable,\n): UseEmailLinkSignInReturn | UseEmailLinkSignUpReturn | UseEmailLinkEmailAddressReturn {\n  const { startEmailLinkFlow, cancelEmailLinkFlow } = React.useMemo(() => resource.createEmailLinkFlow(), [resource]);\n\n  React.useEffect(() => {\n    return cancelEmailLinkFlow;\n  }, []);\n\n  return {\n    startEmailLinkFlow,\n    cancelEmailLinkFlow,\n  } as UseEmailLinkSignInReturn | UseEmailLinkSignUpReturn | UseEmailLinkEmailAddressReturn;\n}\n\nexport { useEmailLink };\n","import { useClientContext } from '@clerk/shared/react';\nimport { eventMethodCalled } from '@clerk/shared/telemetry';\nimport type { UseSignInReturn } from '@clerk/types';\n\nimport { useIsomorphicClerkContext } from '../contexts/IsomorphicClerkContext';\nimport { useAssertWrappedByClerkProvider } from './useAssertWrappedByClerkProvider';\n\n/**\n * The `useSignIn()` hook provides access to the [`SignIn`](https://clerk.com/docs/references/javascript/sign-in) object, which allows you to check the current state of a sign-in attempt and manage the sign-in flow. You can use this to create a [custom sign-in flow](https://clerk.com/docs/custom-flows/overview#sign-in-flow).\n *\n * @unionReturnHeadings\n * [\"Initialization\", \"Loaded\"]\n *\n * @example\n * ### Check the current state of a sign-in\n *\n * The following example uses the `useSignIn()` hook to access the [`SignIn`](https://clerk.com/docs/references/javascript/sign-in) object, which contains the current sign-in attempt status and methods to create a new sign-in attempt. The `isLoaded` property is used to handle the loading state.\n *\n * <Tabs items='React,Next.js'>\n * <Tab>\n *\n * ```tsx {{ filename: 'src/pages/SignInPage.tsx' }}\n * import { useSignIn } from '@clerk/clerk-react'\n *\n * export default function SignInPage() {\n *   const { isLoaded, signIn } = useSignIn()\n *\n *   if (!isLoaded) {\n *     // Handle loading state\n *     return null\n *   }\n *\n *   return <div>The current sign-in attempt status is {signIn?.status}.</div>\n * }\n * ```\n *\n * </Tab>\n * <Tab>\n *\n * {@include ../../docs/use-sign-in.md#nextjs-01}\n *\n * </Tab>\n * </Tabs>\n *\n * @example\n * ### Create a custom sign-in flow with `useSignIn()`\n *\n * The `useSignIn()` hook can also be used to build fully custom sign-in flows, if Clerk's prebuilt components don't meet your specific needs or if you require more control over the authentication flow. Different sign-in flows include email and password, email and phone codes, email links, and multifactor (MFA). To learn more about using the `useSignIn()` hook to create custom flows, see the [custom flow guides](https://clerk.com/docs/custom-flows/overview).\n *\n * ```empty```\n */\nexport const useSignIn = (): UseSignInReturn => {\n  useAssertWrappedByClerkProvider('useSignIn');\n\n  const isomorphicClerk = useIsomorphicClerkContext();\n  const client = useClientContext();\n\n  isomorphicClerk.telemetry?.record(eventMethodCalled('useSignIn'));\n\n  if (!client) {\n    return { isLoaded: false, signIn: undefined, setActive: undefined };\n  }\n\n  return {\n    isLoaded: true,\n    signIn: client.signIn,\n    setActive: isomorphicClerk.setActive,\n  };\n};\n","import { useClientContext } from '@clerk/shared/react';\nimport { eventMethodCalled } from '@clerk/shared/telemetry';\nimport type { UseSignUpReturn } from '@clerk/types';\n\nimport { useIsomorphicClerkContext } from '../contexts/IsomorphicClerkContext';\nimport { useAssertWrappedByClerkProvider } from './useAssertWrappedByClerkProvider';\n\n/**\n * The `useSignUp()` hook provides access to the [`SignUp`](https://clerk.com/docs/references/javascript/sign-up) object, which allows you to check the current state of a sign-up attempt and manage the sign-up flow. You can use this to create a [custom sign-up flow](https://clerk.com/docs/custom-flows/overview#sign-up-flow).\n *\n * @unionReturnHeadings\n * [\"Initialization\", \"Loaded\"]\n *\n * @example\n * ### Check the current state of a sign-up\n *\n * The following example uses the `useSignUp()` hook to access the [`SignUp`](https://clerk.com/docs/references/javascript/sign-up) object, which contains the current sign-up attempt status and methods to create a new sign-up attempt. The `isLoaded` property is used to handle the loading state.\n *\n * <Tabs items='React,Next.js'>\n * <Tab>\n *\n * ```tsx {{ filename: 'src/pages/SignUpPage.tsx' }}\n * import { useSignUp } from '@clerk/clerk-react'\n *\n * export default function SignUpPage() {\n *   const { isLoaded, signUp } = useSignUp()\n *\n *   if (!isLoaded) {\n *     // Handle loading state\n *     return null\n *   }\n *\n *   return <div>The current sign-up attempt status is {signUp?.status}.</div>\n * }\n * ```\n *\n * </Tab>\n * <Tab>\n *\n * {@include ../../docs/use-sign-up.md#nextjs-01}\n *\n * </Tab>\n * </Tabs>\n *\n * @example\n * ### Create a custom sign-up flow with `useSignUp()`\n *\n * The `useSignUp()` hook can also be used to build fully custom sign-up flows, if Clerk's prebuilt components don't meet your specific needs or if you require more control over the authentication flow. Different sign-up flows include email and password, email and phone codes, email links, and multifactor (MFA). To learn more about using the `useSignUp()` hook to create custom flows, see the [custom flow guides](https://clerk.com/docs/custom-flows/overview).\n *\n * ```empty```\n */\nexport const useSignUp = (): UseSignUpReturn => {\n  useAssertWrappedByClerkProvider('useSignUp');\n\n  const isomorphicClerk = useIsomorphicClerkContext();\n  const client = useClientContext();\n\n  isomorphicClerk.telemetry?.record(eventMethodCalled('useSignUp'));\n\n  if (!client) {\n    return { isLoaded: false, signUp: undefined, setActive: undefined };\n  }\n\n  return {\n    isLoaded: true,\n    signUp: client.signUp,\n    setActive: isomorphicClerk.setActive,\n  };\n};\n","export { useAuth } from './useAuth';\nexport { useEmailLink } from './useEmailLink';\nexport { useSignIn } from './useSignIn';\nexport { useSignUp } from './useSignUp';\nexport {\n  useClerk,\n  useOrganization,\n  useOrganizationList,\n  useSessionList,\n  useUser,\n  useSession,\n  useReverification,\n  __experimental_usePaymentElement,\n  __experimental_PaymentElementProvider,\n  __experimental_PaymentElement,\n} from '@clerk/shared/react';\n","import { deprecated } from '@clerk/shared/deprecated';\nimport type { HandleOAuthCallbackParams, PendingSessionOptions, ProtectProps as _ProtectProps } from '@clerk/types';\nimport React from 'react';\n\nimport { useIsomorphicClerkContext } from '../contexts/IsomorphicClerkContext';\nimport { useSessionContext } from '../contexts/SessionContext';\nimport { useAuth } from '../hooks';\nimport { useAssertWrappedByClerkProvider } from '../hooks/useAssertWrappedByClerkProvider';\nimport type { RedirectToSignInProps, RedirectToSignUpProps, WithClerkProp } from '../types';\nimport { withClerk } from './withClerk';\n\nexport const SignedIn = ({ children, treatPendingAsSignedOut }: React.PropsWithChildren<PendingSessionOptions>) => {\n  useAssertWrappedByClerkProvider('SignedIn');\n\n  const { userId } = useAuth({ treatPendingAsSignedOut });\n  if (userId) {\n    return children;\n  }\n  return null;\n};\n\nexport const SignedOut = ({ children, treatPendingAsSignedOut }: React.PropsWithChildren<PendingSessionOptions>) => {\n  useAssertWrappedByClerkProvider('SignedOut');\n\n  const { userId } = useAuth({ treatPendingAsSignedOut });\n  if (userId === null) {\n    return children;\n  }\n  return null;\n};\n\nexport const ClerkLoaded = ({ children }: React.PropsWithChildren<unknown>) => {\n  useAssertWrappedByClerkProvider('ClerkLoaded');\n\n  const isomorphicClerk = useIsomorphicClerkContext();\n  if (!isomorphicClerk.loaded) {\n    return null;\n  }\n  return children;\n};\n\nexport const ClerkLoading = ({ children }: React.PropsWithChildren<unknown>) => {\n  useAssertWrappedByClerkProvider('ClerkLoading');\n\n  const isomorphicClerk = useIsomorphicClerkContext();\n  if (isomorphicClerk.status !== 'loading') {\n    return null;\n  }\n  return children;\n};\n\nexport const ClerkFailed = ({ children }: React.PropsWithChildren<unknown>) => {\n  useAssertWrappedByClerkProvider('ClerkFailed');\n\n  const isomorphicClerk = useIsomorphicClerkContext();\n  if (isomorphicClerk.status !== 'error') {\n    return null;\n  }\n  return children;\n};\n\nexport const ClerkDegraded = ({ children }: React.PropsWithChildren<unknown>) => {\n  useAssertWrappedByClerkProvider('ClerkDegraded');\n\n  const isomorphicClerk = useIsomorphicClerkContext();\n  if (isomorphicClerk.status !== 'degraded') {\n    return null;\n  }\n  return children;\n};\n\nexport type ProtectProps = React.PropsWithChildren<\n  _ProtectProps & {\n    fallback?: React.ReactNode;\n  } & PendingSessionOptions\n>;\n\n/**\n * Use `<Protect/>` in order to prevent unauthenticated or unauthorized users from accessing the children passed to the component.\n *\n * Examples:\n * ```\n * <Protect permission=\"a_permission_key\" />\n * <Protect role=\"a_role_key\" />\n * <Protect condition={(has) => has({permission:\"a_permission_key\"})} />\n * <Protect condition={(has) => has({role:\"a_role_key\"})} />\n * <Protect fallback={<p>Unauthorized</p>} />\n * ```\n */\nexport const Protect = ({ children, fallback, treatPendingAsSignedOut, ...restAuthorizedParams }: ProtectProps) => {\n  useAssertWrappedByClerkProvider('Protect');\n\n  const { isLoaded, has, userId } = useAuth({ treatPendingAsSignedOut });\n\n  /**\n   * Avoid flickering children or fallback while clerk is loading sessionId or userId\n   */\n  if (!isLoaded) {\n    return null;\n  }\n\n  /**\n   * Fallback to UI provided by user or `null` if authorization checks failed\n   */\n  const unauthorized = fallback ?? null;\n\n  const authorized = children;\n\n  if (!userId) {\n    return unauthorized;\n  }\n\n  /**\n   * Check against the results of `has` called inside the callback\n   */\n  if (typeof restAuthorizedParams.condition === 'function') {\n    if (restAuthorizedParams.condition(has)) {\n      return authorized;\n    }\n    return unauthorized;\n  }\n\n  if (\n    restAuthorizedParams.role ||\n    restAuthorizedParams.permission ||\n    restAuthorizedParams.feature ||\n    restAuthorizedParams.plan\n  ) {\n    if (has(restAuthorizedParams)) {\n      return authorized;\n    }\n    return unauthorized;\n  }\n\n  /**\n   * If neither of the authorization params are passed behave as the `<SignedIn/>`.\n   * If fallback is present render that instead of rendering nothing.\n   */\n  return authorized;\n};\n\nexport const RedirectToSignIn = withClerk(({ clerk, ...props }: WithClerkProp<RedirectToSignInProps>) => {\n  const { client, session } = clerk;\n\n  const hasSignedInSessions = client.signedInSessions\n    ? client.signedInSessions.length > 0\n    : // Compat for clerk-js<5.54.0 (which was released with the `signedInSessions` property)\n      client.activeSessions && client.activeSessions.length > 0;\n\n  React.useEffect(() => {\n    if (session === null && hasSignedInSessions) {\n      void clerk.redirectToAfterSignOut();\n    } else {\n      void clerk.redirectToSignIn(props);\n    }\n  }, []);\n\n  return null;\n}, 'RedirectToSignIn');\n\nexport const RedirectToSignUp = withClerk(({ clerk, ...props }: WithClerkProp<RedirectToSignUpProps>) => {\n  React.useEffect(() => {\n    void clerk.redirectToSignUp(props);\n  }, []);\n\n  return null;\n}, 'RedirectToSignUp');\n\n/**\n * @function\n * @deprecated Use [`redirectToUserProfile()`](https://clerk.com/docs/references/javascript/clerk#redirect-to-user-profile) instead.\n */\nexport const RedirectToUserProfile = withClerk(({ clerk }) => {\n  React.useEffect(() => {\n    deprecated('RedirectToUserProfile', 'Use the `redirectToUserProfile()` method instead.');\n    void clerk.redirectToUserProfile();\n  }, []);\n\n  return null;\n}, 'RedirectToUserProfile');\n\n/**\n * @function\n * @deprecated Use [`redirectToOrganizationProfile()`](https://clerk.com/docs/references/javascript/clerk#redirect-to-organization-profile) instead.\n */\nexport const RedirectToOrganizationProfile = withClerk(({ clerk }) => {\n  React.useEffect(() => {\n    deprecated('RedirectToOrganizationProfile', 'Use the `redirectToOrganizationProfile()` method instead.');\n    void clerk.redirectToOrganizationProfile();\n  }, []);\n\n  return null;\n}, 'RedirectToOrganizationProfile');\n\n/**\n * @function\n * @deprecated Use [`redirectToCreateOrganization()`](https://clerk.com/docs/references/javascript/clerk#redirect-to-create-organization) instead.\n */\nexport const RedirectToCreateOrganization = withClerk(({ clerk }) => {\n  React.useEffect(() => {\n    deprecated('RedirectToCreateOrganization', 'Use the `redirectToCreateOrganization()` method instead.');\n    void clerk.redirectToCreateOrganization();\n  }, []);\n\n  return null;\n}, 'RedirectToCreateOrganization');\n\nexport const AuthenticateWithRedirectCallback = withClerk(\n  ({ clerk, ...handleRedirectCallbackParams }: WithClerkProp<HandleOAuthCallbackParams>) => {\n    React.useEffect(() => {\n      void clerk.handleRedirectCallback(handleRedirectCallbackParams);\n    }, []);\n\n    return null;\n  },\n  'AuthenticateWithRedirectCallback',\n);\n\nexport const MultisessionAppSupport = ({ children }: React.PropsWithChildren<unknown>) => {\n  useAssertWrappedByClerkProvider('MultisessionAppSupport');\n\n  const session = useSessionContext();\n  return <React.Fragment key={session ? session.id : 'no-users'}>{children}</React.Fragment>;\n};\n","export { SessionContext, useSessionContext } from '@clerk/shared/react';\n","import type { LoadedClerk, Without } from '@clerk/types';\nimport React from 'react';\n\nimport { useIsomorphicClerkContext } from '../contexts/IsomorphicClerkContext';\nimport { useAssertWrappedByClerkProvider } from '../hooks/useAssertWrappedByClerkProvider';\n\nexport const withClerk = <P extends { clerk: LoadedClerk; component?: string }>(\n  Component: React.ComponentType<P>,\n  displayNameOrOptions?: string | { component: string; renderWhileLoading?: boolean },\n) => {\n  const passedDisplayedName =\n    typeof displayNameOrOptions === 'string' ? displayNameOrOptions : displayNameOrOptions?.component;\n  const displayName = passedDisplayedName || Component.displayName || Component.name || 'Component';\n  Component.displayName = displayName;\n\n  const options = typeof displayNameOrOptions === 'string' ? undefined : displayNameOrOptions;\n\n  const HOC = (props: Without<P, 'clerk'>) => {\n    useAssertWrappedByClerkProvider(displayName || 'withClerk');\n\n    const clerk = useIsomorphicClerkContext();\n\n    if (!clerk.loaded && !options?.renderWhileLoading) {\n      return null;\n    }\n\n    return (\n      <Component\n        {...(props as P)}\n        component={displayName}\n        clerk={clerk}\n      />\n    );\n  };\n  HOC.displayName = `withClerk(${displayName})`;\n  return HOC;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}